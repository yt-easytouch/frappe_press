{"version":3,"file":"Form-CIPLpg2e.js","sources":["../../../../dashboard/src/components/Form.vue"],"sourcesContent":["<template>\n\t<div class=\"space-y-4\">\n\t\t<div\n\t\t\tv-for=\"field in fields\"\n\t\t\t:key=\"field.fieldname\"\n\t\t\tv-show=\"field.condition ? field.condition() : true\"\n\t\t>\n\t\t\t<div class=\"flex space-x-4\" v-if=\"Array.isArray(field)\">\n\t\t\t\t<FormControl\n\t\t\t\t\tv-bind=\"getBindProps(subfield)\"\n\t\t\t\t\t:key=\"subfield.fieldname\"\n\t\t\t\t\tclass=\"w-full\"\n\t\t\t\t\tv-for=\"subfield in field\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<FormControl v-else v-bind=\"getBindProps(field)\" />\n\t\t\t<ErrorMessage\n\t\t\t\tclass=\"mt-1\"\n\t\t\t\tv-if=\"requiredFieldNotSet.includes(field)\"\n\t\t\t\terror=\"This field is required\"\n\t\t\t/>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\n// https://github.com/eggert/tz/blob/main/backward add more if required.\nconst TZ_BACKWARD_COMPATBILITY_MAP = {\n\t'Asia/Calcutta': 'Asia/Kolkata'\n};\n\nexport default {\n\tname: 'Form',\n\tprops: ['fields', 'modelValue'],\n\temits: ['update:modelValue'],\n\tdata() {\n\t\treturn {\n\t\t\trequiredFieldNotSet: [],\n\t\t\tguessedTimezone: ''\n\t\t};\n\t},\n\tmounted() {\n\t\tthis.guessedTimezone = this.guessTimezone();\n\t},\n\twatch: {\n\t\tfields: {\n\t\t\thandler(new_fields) {\n\t\t\t\tlet timezoneFields = new_fields.filter(\n\t\t\t\t\tf => f.fieldtype === 'Select' && f.fieldname.endsWith('_tz')\n\t\t\t\t);\n\t\t\t\tfor (let field of timezoneFields) {\n\t\t\t\t\tif (!field.options) {\n\t\t\t\t\t\tfield.options = [];\n\t\t\t\t\t}\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.guessedTimezone &&\n\t\t\t\t\t\tfield.options.includes(this.guessedTimezone)\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.onChange(this.guessedTimezone, field);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeep: true\n\t\t}\n\t},\n\tmethods: {\n\t\tonChange(value, field) {\n\t\t\tthis.checkRequired(field, value);\n\t\t\tthis.updateValue(field.fieldname, value);\n\t\t},\n\t\tupdateValue(fieldname, value) {\n\t\t\tlet values = Object.assign({}, this.modelValue, {\n\t\t\t\t[fieldname]: value\n\t\t\t});\n\t\t\tthis.$emit('update:modelValue', values);\n\t\t},\n\t\tcheckRequired(field, value) {\n\t\t\tif (field.required) {\n\t\t\t\tif (!value) {\n\t\t\t\t\tthis.requiredFieldNotSet.push(field);\n\t\t\t\t\treturn false;\n\t\t\t\t} else {\n\t\t\t\t\tthis.requiredFieldNotSet = this.requiredFieldNotSet.filter(\n\t\t\t\t\t\tf => f !== field\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\t\tgetBindProps(field) {\n\t\t\treturn {\n\t\t\t\tlabel: field.label || field.fieldname,\n\t\t\t\ttype: this.getInputType(field),\n\t\t\t\toptions: field.options,\n\t\t\t\tname: field.fieldname,\n\t\t\t\tmodelValue: this.modelValue[field.fieldname],\n\t\t\t\tdisabled: field.disabled,\n\t\t\t\trequired: field.required || false,\n\t\t\t\trows: field.rows,\n\t\t\t\tplaceholder: field.placeholder,\n\t\t\t\t'onUpdate:modelValue': value => this.onChange(value, field),\n\t\t\t\tonBlur: e => this.checkRequired(field, e)\n\t\t\t};\n\t\t},\n\t\tgetInputType(field) {\n\t\t\treturn {\n\t\t\t\tData: 'text',\n\t\t\t\tInt: 'number',\n\t\t\t\tSelect: 'select',\n\t\t\t\tCheck: 'checkbox',\n\t\t\t\tPassword: 'password',\n\t\t\t\tText: 'textarea',\n\t\t\t\tDate: 'date'\n\t\t\t}[field.fieldtype || 'Data'];\n\t\t},\n\t\tguessTimezone() {\n\t\t\ttry {\n\t\t\t\tlet tz = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\t\t\t\tif (TZ_BACKWARD_COMPATBILITY_MAP[tz]) {\n\t\t\t\t\treturn TZ_BACKWARD_COMPATBILITY_MAP[tz];\n\t\t\t\t}\n\t\t\t\treturn tz;\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error(\"Couldn't guess timezone\", e);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n};\n</script>\n"],"names":["TZ_BACKWARD_COMPATBILITY_MAP","_sfc_main","new_fields","timezoneFields","field","value","values","fieldname","e","tz","_hoisted_1","_openBlock","_createElementBlock","_Fragment","_renderList","$props","_hoisted_2","subfield","_createBlock","_component_FormControl","_mergeProps","$options","_createCommentVNode","_vShow"],"mappings":"wwBA2BA,MAAAA,EAAA,+BAEA,EAEAC,EAAA,uEAIC,MAAA,CACC,MAAA,wBAEC,gBAAA,KAGF,SAAA,CACC,KAAA,gBAAA,KAAA,cAAA,GAED,MAAA,CACC,OAAA,CACC,QAAAC,EAAA,CACC,IAAAC,EAAAD,EAAA,8EAICE,EAAA,UACCA,EAAA,QAAA,CAAA,GAGA,KAAA,iBACAA,EAAA,QAAA,SAAA,KAAA,eAAA,GAEA,KAAA,SAAA,KAAA,gBAAAA,CAAA,GAIH,KAAA,EACD,GAED,QAAA,CACC,SAAAC,EAAAD,EAAA,CACC,KAAA,cAAAA,EAAAC,CAAA,EACA,KAAA,YAAAD,EAAA,UAAAC,CAAA,oBAGA,IAAAC,EAAA,OAAA,OAAA,CAAA,EAAA,KAAA,WAAA,CACC,CAAAC,CAAA,EAAAF,CACD,CAAA,EACA,KAAA,MAAA,oBAAAC,CAAA,sBAGA,GAAAF,EAAA,qFAEE,aAAA,oBAAA,KAAAA,CAAA,eAUH,aAAAA,EAAA,CACC,MAAA,CACC,MAAAA,EAAA,OAAAA,EAAA,oCAEA,QAAAA,EAAA,QACA,KAAAA,EAAA,UACA,WAAA,KAAA,WAAAA,EAAA,SAAA,sBAEA,SAAAA,EAAA,UAAA,GACA,KAAAA,EAAA,2EAGA,OAAAI,GAAA,KAAA,cAAAJ,EAAAI,CAAA,IAGF,aAAAJ,EAAA,CACC,MAAA,0BAGC,OAAA,SACA,MAAA,WACA,SAAA,WACA,KAAA,8CAIF,eAAA,CACC,GAAA,wDAEC,OAAAJ,EAAAS,CAAA,EACCT,EAAAS,CAAA,EAEDA,CACD,OAAA,EAAA,CACC,eAAA,MAAA,0BAAA,CAAA,MAED,CACD,CACD,CACD,EA/HMC,EAAA,CAAA,MAAA,WAAA,WAME,MAAA,wDANP,OAAAC,EAAA,EAAAC,EAAA,MAAAF,EAAA,EACCC,EAAA,EAAA,EAAAC,EAAAC,EAAA,KAAAC,EAAAC,EAAA,OAAAX,uDAKCO,IAAAC,EAAA,MAAAI,EAAA,EACCL,EAAA,EAAA,EAAAC,EAAAC,EAAA,KAAAC,EAAAV,EAAAa,IAAAN,EAAA,EAAAO,EAAAC,EAAAC,EAAA,CAAA,QAAA,IAAAC,EAAA,aAAAJ,CAAA,EAAA,iBAGC,MAAA,gCAIFN,IAAAO,EAAAC,EAAAC,EAAA,iBAA4B,EAAAC,EAAA,aAAAjB,CAAA,CAAA,EAAA,KAAA,EAAA,qDAE3B,MAAA,OAEA,MAAA,4BAnBJkB,EAAA,GAAA,EAAA,MAKW,CAAAC,EAAAnB,EAAA,UAAAA,EAAA,UAAA,EAAA,EAAA"}