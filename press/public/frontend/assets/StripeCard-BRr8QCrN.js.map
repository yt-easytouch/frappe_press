{"version":3,"file":"StripeCard-BRr8QCrN.js","sources":["../../../../dashboard/src/components/StripeCard.vue"],"sourcesContent":["<template>\n\t<div class=\"relative\">\n\t\t<div\n\t\t\tv-if=\"!ready\"\n\t\t\tclass=\"absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-8 transform\"\n\t\t>\n\t\t\t<Spinner class=\"h-5 w-5 text-gray-600\" />\n\t\t</div>\n\t\t<div :class=\"{ 'opacity-0': !ready }\">\n\t\t\t<div v-show=\"!tryingMicroCharge\">\n\t\t\t\t<label class=\"block\">\n\t\t\t\t\t<span class=\"block text-xs text-gray-600\">\n\t\t\t\t\t\tCredit or Debit Card\n\t\t\t\t\t</span>\n\t\t\t\t\t<div\n\t\t\t\t\t\tclass=\"form-input mt-2 block h-[unset] w-full py-2 pl-3\"\n\t\t\t\t\t\tref=\"card-element\"\n\t\t\t\t\t></div>\n\t\t\t\t\t<ErrorMessage class=\"mt-1\" :message=\"cardErrorMessage\" />\n\t\t\t\t</label>\n\t\t\t\t<FormControl\n\t\t\t\t\tclass=\"mt-4\"\n\t\t\t\t\tlabel=\"Name on Card\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tv-model=\"billingInformation.cardHolderName\"\n\t\t\t\t/>\n\t\t\t\t<AddressForm\n\t\t\t\t\tv-if=\"!withoutAddress\"\n\t\t\t\t\tclass=\"mt-4\"\n\t\t\t\t\tv-model:address=\"billingInformation\"\n\t\t\t\t\tref=\"address-form\"\n\t\t\t\t/>\n\t\t\t</div>\n\n\t\t\t<div class=\"mt-3\" v-show=\"tryingMicroCharge\">\n\t\t\t\t<p class=\"text-lg text-gray-800\">\n\t\t\t\t\tWe are attempting to charge your card with\n\t\t\t\t\t<strong>{{ formattedMicroChargeAmount }}</strong> to make sure the\n\t\t\t\t\tcard works. This amount will be <strong>refunded</strong> back to your\n\t\t\t\t\taccount.\n\t\t\t\t</p>\n\n\t\t\t\t<Button class=\"mt-2\" :loading=\"true\">Attempting Test Charge</Button>\n\t\t\t</div>\n\n\t\t\t<ErrorMessage class=\"mt-2\" :message=\"errorMessage\" />\n\n\t\t\t<div class=\"mt-6 flex items-center justify-between\">\n\t\t\t\t<StripeLogo />\n\t\t\t\t<Button variant=\"solid\" @click=\"submit\" :loading=\"addingCard\">\n\t\t\t\t\tSave Card\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\nimport AddressForm from '../../src2/components/AddressForm.vue';\nimport StripeLogo from '@/components/StripeLogo.vue';\nimport { loadStripe } from '@stripe/stripe-js';\n\nexport default {\n\tname: 'StripeCard',\n\tprops: ['withoutAddress'],\n\temits: ['complete'],\n\tcomponents: {\n\t\tAddressForm,\n\t\tStripeLogo\n\t},\n\tdata() {\n\t\treturn {\n\t\t\terrorMessage: null,\n\t\t\tcardErrorMessage: null,\n\t\t\tready: false,\n\t\t\tsetupIntent: null,\n\t\t\tbillingInformation: {\n\t\t\t\tcardHolderName: '',\n\t\t\t\tcountry: '',\n\t\t\t\tgstin: ''\n\t\t\t},\n\t\t\tgstNotApplicable: false,\n\t\t\taddingCard: false,\n\t\t\ttryingMicroCharge: false\n\t\t};\n\t},\n\tasync mounted() {\n\t\tthis.setupCard();\n\n\t\tlet { first_name, last_name = '' } = this.$account.user;\n\t\tlet fullname = first_name + ' ' + last_name;\n\t\tthis.billingInformation.cardHolderName = fullname.trimEnd();\n\t},\n\tresources: {\n\t\tcountryList: 'press.api.account.country_list',\n\t\tbillingAddress() {\n\t\t\treturn {\n\t\t\t\turl: 'press.api.account.get_billing_information',\n\t\t\t\tparams: {\n\t\t\t\t\ttimezone: this.browserTimezone\n\t\t\t\t},\n\t\t\t\tauto: true,\n\t\t\t\tonSuccess(data) {\n\t\t\t\t\tthis.billingInformation.country = data?.country;\n\t\t\t\t\tthis.billingInformation.address = data?.address_line1;\n\t\t\t\t\tthis.billingInformation.city = data?.city;\n\t\t\t\t\tthis.billingInformation.state = data?.state;\n\t\t\t\t\tthis.billingInformation.postal_code = data?.pincode;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t},\n\tmethods: {\n\t\tasync setupCard() {\n\t\t\tlet result = await this.$call(\n\t\t\t\t'press.api.billing.get_publishable_key_and_setup_intent'\n\t\t\t);\n\t\t\t//window.posthog.capture('init_client_add_card', 'fc_signup');\n\t\t\tlet { publishable_key, setup_intent } = result;\n\t\t\tthis.setupIntent = setup_intent;\n\t\t\tthis.stripe = await loadStripe(publishable_key);\n\t\t\tthis.elements = this.stripe.elements();\n\t\t\tlet theme = this.$theme;\n\t\t\tlet style = {\n\t\t\t\tbase: {\n\t\t\t\t\tcolor: theme.colors.black,\n\t\t\t\t\tfontFamily: theme.fontFamily.sans.join(', '),\n\t\t\t\t\tfontSmoothing: 'antialiased',\n\t\t\t\t\tfontSize: '13px',\n\t\t\t\t\t'::placeholder': {\n\t\t\t\t\t\tcolor: theme.colors.gray['400']\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tinvalid: {\n\t\t\t\t\tcolor: theme.colors.red['600'],\n\t\t\t\t\ticonColor: theme.colors.red['600']\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.card = this.elements.create('card', {\n\t\t\t\thidePostalCode: true,\n\t\t\t\tstyle: style,\n\t\t\t\tclasses: {\n\t\t\t\t\tcomplete: '',\n\t\t\t\t\tfocus: 'bg-gray-100'\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.card.mount(this.$refs['card-element']);\n\n\t\t\tthis.card.addEventListener('change', event => {\n\t\t\t\tthis.cardErrorMessage = event.error?.message || null;\n\t\t\t});\n\t\t\tthis.card.addEventListener('ready', () => {\n\t\t\t\tthis.ready = true;\n\t\t\t});\n\t\t},\n\t\tasync submit() {\n\t\t\tthis.addingCard = true;\n\n\t\t\tlet message;\n\t\t\tif (!this.withoutAddress) {\n\t\t\t\tmessage = await this.$refs['address-form'].validateValues();\n\t\t\t}\n\t\t\tif (message) {\n\t\t\t\tthis.errorMessage = message;\n\t\t\t\tthis.addingCard = false;\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tthis.errorMessage = null;\n\t\t\t}\n\n\t\t\tconst { setupIntent, error } = await this.stripe.confirmCardSetup(\n\t\t\t\tthis.setupIntent.client_secret,\n\t\t\t\t{\n\t\t\t\t\tpayment_method: {\n\t\t\t\t\t\tcard: this.card,\n\t\t\t\t\t\tbilling_details: {\n\t\t\t\t\t\t\tname: this.billingInformation.cardHolderName,\n\t\t\t\t\t\t\taddress: {\n\t\t\t\t\t\t\t\tline1: this.billingInformation.address,\n\t\t\t\t\t\t\t\tcity: this.billingInformation.city,\n\t\t\t\t\t\t\t\tstate: this.billingInformation.state,\n\t\t\t\t\t\t\t\tpostal_code: this.billingInformation.postal_code,\n\t\t\t\t\t\t\t\tcountry: this.getCountryCode(this.billingInformation.country)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tif (error) {\n\t\t\t\tthis.addingCard = false;\n\t\t\t\tlet errorMessage = error.message;\n\t\t\t\t// fix for duplicate error message\n\t\t\t\tif (errorMessage != 'Your card number is incomplete.') {\n\t\t\t\t\tthis.errorMessage = errorMessage;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (setupIntent.status === 'succeeded') {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst { payment_method_name } = await this.$call(\n\t\t\t\t\t\t\t'press.api.billing.setup_intent_success',\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsetup_intent: setupIntent,\n\t\t\t\t\t\t\t\taddress: this.withoutAddress ? null : this.billingInformation\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t\t//window.posthog.capture('completed_client_add_card', 'fc_signup');\n\n\t\t\t\t\t\tawait this.verifyWithMicroChargeIfApplicable(payment_method_name);\n\n\t\t\t\t\t\tthis.addingCard = false;\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tconsole.error(error);\n\t\t\t\t\t\tthis.addingCard = false;\n\t\t\t\t\t\tthis.errorMessage = error.messages.join('\\n');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tasync verifyWithMicroChargeIfApplicable(paymentMethodName) {\n\t\t\tconst teamCurrency = this.$account.team.currency;\n\t\t\tconst verifyCardsWithMicroCharge =\n\t\t\t\tthis.$account.feature_flags.verify_cards_with_micro_charge;\n\n\t\t\tconst isMicroChargeApplicable =\n\t\t\t\tverifyCardsWithMicroCharge === 'Both INR and USD' ||\n\t\t\t\t(verifyCardsWithMicroCharge == 'Only INR' && teamCurrency === 'INR') ||\n\t\t\t\t(verifyCardsWithMicroCharge === 'Only USD' && teamCurrency === 'USD');\n\n\t\t\tif (isMicroChargeApplicable) {\n\t\t\t\tawait this._verifyWithMicroCharge(paymentMethodName);\n\t\t\t} else {\n\t\t\t\tthis.$emit('complete');\n\t\t\t}\n\t\t},\n\n\t\tasync _verifyWithMicroCharge(paymentMethodName) {\n\t\t\tthis.tryingMicroCharge = true;\n\n\t\t\tconst paymentIntent = await this.$call(\n\t\t\t\t'press.api.billing.create_payment_intent_for_micro_debit',\n\t\t\t\t{\n\t\t\t\t\tpayment_method_name: paymentMethodName\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tlet { client_secret: clientSecret } = paymentIntent;\n\n\t\t\tlet payload = await this.stripe.confirmCardPayment(clientSecret, {\n\t\t\t\tpayment_method: {\n\t\t\t\t\tcard: this.card\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (payload.paymentIntent.status === 'succeeded') {\n\t\t\t\tthis.$emit('complete');\n\t\t\t}\n\n\t\t\tthis.tryingMicroCharge = false;\n\t\t},\n\t\tgetCountryCode(country) {\n\t\t\tlet code = this.$resources.countryList.data.find(\n\t\t\t\td => d.name === country\n\t\t\t).code;\n\t\t\treturn code.toUpperCase();\n\t\t}\n\t},\n\tcomputed: {\n\t\tformattedMicroChargeAmount() {\n\t\t\tconst isINR = this.$account.team.currency === 'INR';\n\t\t\treturn isINR ? 'â‚¹100' : '$1';\n\t\t},\n\t\tbrowserTimezone() {\n\t\t\tif (!window.Intl) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn Intl.DateTimeFormat().resolvedOptions().timeZone;\n\t\t}\n\t}\n};\n</script>\n"],"names":["_sfc_main","StripeLogo","__async","fullname","first_name","last_name","data","publishable_key","setup_intent","result","loadStripe","theme","style","event","error","errorMessage","setupIntent","payment_method_name","teamCurrency","verifyCardsWithMicroCharge","paymentIntent","paymentMethodName","clientSecret","d","country","_hoisted_1","_hoisted_3","_hoisted_5","_hoisted_6","_hoisted_7","_openBlock","_createElementBlock","_createCommentVNode","_hoisted_2","_createElementVNode","_cache","_hoisted_4","$data","$event","_withDirectives","_createTextVNode","_toDisplayString","$options","_withCtx"],"mappings":"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"}