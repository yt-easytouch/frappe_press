{"version":3,"file":"NewSelfHostedServer-Bh1cALgY.js","sources":["../../../../dashboard/src/views/server/NewSelfHostedServerHostname.vue","../../../../dashboard/src/views/server/NewSelfHostedServerForm.vue","../../../../dashboard/src/views/server/SelfHostedServerVerify.vue","../../../../dashboard/src/views/server/SelfHostedServerPlan.vue","../../../../dashboard/src/views/server/NewSelfHostedServer.vue"],"sourcesContent":["<template>\n\t<div>\n\t\t<label class=\"text-lg font-semibold\">\n\t\t\tChoose a name for your Self Hosted server\n\t\t</label>\n\t\t<p class=\"my-3 text-base text-gray-700\">\n\t\t\tName your server based on its purpose\n\t\t</p>\n\t\t<div class=\"space-y-2\">\n\t\t\t<FormControl\n\t\t\t\tclass=\"z-10 w-full rounded-r-none\"\n\t\t\t\t:value=\"title\"\n\t\t\t\t@change=\"titleChange\"\n\t\t\t\tplaceholder=\"AcmeCorp Production Server\"\n\t\t\t/>\n\t\t</div>\n\t\t<ErrorMessage class=\"mt-4\" :message=\"errorMessage\" />\n\t</div>\n</template>\n<script>\nexport default {\n\tname: 'SelfHostedHostname',\n\tprops: ['title'],\n\temits: ['update:title', 'error'],\n\tdata() {\n\t\treturn {\n\t\t\terrorMessage: null\n\t\t};\n\t},\n\tmethods: {\n\t\tasync titleChange(e) {\n\t\t\tlet title = e.target.value;\n\t\t\tthis.$emit('update:title', title);\n\t\t\tlet error = this.validateTitle(title);\n\t\t\tthis.errorMessage = error;\n\t\t\tthis.$emit('error', error);\n\t\t},\n\t\tvalidateTitle(title) {\n\t\t\tif (!title) {\n\t\t\t\treturn 'Server name cannot be left blank';\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n};\n</script>\n","<template>\n\t<div>\n\t\t<div class=\"mb-3\">\n\t\t\t<div>\n\t\t\t\t<h2 class=\"space-y-1 mt-6 text-lg font-semibold\">\n\t\t\t\t\tEnter the Application Server Details\n\t\t\t\t</h2>\n\t\t\t\t<div class=\"mt-6 flex flex-col gap-4\">\n\t\t\t\t\t<p class=\"text-black-900 text-base\">Public IP of the Server</p>\n\t\t\t\t\t<FormControl\n\t\t\t\t\t\tclass=\"z-10 w-full rounded-r-none\"\n\t\t\t\t\t\t:value=\"appPublicIP\"\n\t\t\t\t\t\t@change=\"$emit('update:appPublicIP', $event.target.value)\"\n\t\t\t\t\t/>\n\t\t\t\t\t<ErrorMessage class=\"text-sm\" :message=\"publicIpErrorMessage\" />\n\n\t\t\t\t\t<p class=\"text-black-900 text-base\">Private IP of the Server</p>\n\t\t\t\t\t<FormControl\n\t\t\t\t\t\tclass=\"z-10 w-full rounded-r-none\"\n\t\t\t\t\t\t:value=\"appPrivateIP\"\n\t\t\t\t\t\t@change=\"$emit('update:appPrivateIP', $event.target.value)\"\n\t\t\t\t\t/>\n\t\t\t\t\t<ErrorMessage class=\"text-sm\" :message=\"privateIpErrorMessage\" />\n\t\t\t\t</div>\n\n\t\t\t\t<h2 class=\"space-y-1 mt-8 text-lg font-semibold\">\n\t\t\t\t\tEnter the DB Server Details\n\t\t\t\t</h2>\n\t\t\t\t<div class=\"mt-6 flex flex-col gap-4\">\n\t\t\t\t\t<p class=\"text-black-900 text-base\">Public IP of the DB Server</p>\n\t\t\t\t\t<FormControl\n\t\t\t\t\t\tclass=\"z-10 w-full rounded-r-none\"\n\t\t\t\t\t\t:value=\"dbPublicIP\"\n\t\t\t\t\t\t@change=\"$emit('update:dbPublicIP', $event.target.value)\"\n\t\t\t\t\t/>\n\t\t\t\t\t<ErrorMessage class=\"text-sm\" :message=\"dbPublicIpErrorMessage\" />\n\n\t\t\t\t\t<p class=\"text-black-900 text-base\">Private IP of the DB Server</p>\n\t\t\t\t\t<FormControl\n\t\t\t\t\t\tclass=\"z-10 w-full rounded-r-none\"\n\t\t\t\t\t\t:value=\"dbPrivateIP\"\n\t\t\t\t\t\t@change=\"$emit('update:dbPrivateIP', $event.target.value)\"\n\t\t\t\t\t/>\n\t\t\t\t\t<ErrorMessage class=\"text-sm\" :message=\"dbPrivateIpErrorMessage\" />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</template>\n<script>\nexport default {\n\tname: 'SelfHostedServerForm',\n\tprops: ['appPublicIP', 'appPrivateIP', 'dbPublicIP', 'dbPrivateIP', 'error'],\n\temits: [\n\t\t'update:appPublicIP',\n\t\t'update:appPrivateIP',\n\t\t'update:dbPublicIP',\n\t\t'update:dbPrivateIP',\n\t\t'update:error'\n\t],\n\twatch: {\n\t\thasError() {\n\t\t\tthis.$emit('update:error', this.hasError);\n\t\t}\n\t},\n\tmounted() {\n\t\tthis.$emit('update:error', this.hasError);\n\t},\n\tcomputed: {\n\t\tpublicIpErrorMessage() {\n\t\t\treturn this.validateIP(this.appPublicIP, 'Public');\n\t\t},\n\t\tdbPublicIpErrorMessage() {\n\t\t\treturn this.validateIP(this.dbPublicIP, 'DB Public');\n\t\t},\n\t\tprivateIpErrorMessage() {\n\t\t\treturn this.validateIP(this.appPrivateIP, 'Private');\n\t\t},\n\t\tdbPrivateIpErrorMessage() {\n\t\t\treturn this.validateIP(this.dbPrivateIP, 'DB Private');\n\t\t},\n\t\thasError() {\n\t\t\treturn (\n\t\t\t\tthis.publicIpErrorMessage !== null ||\n\t\t\t\tthis.privateIpErrorMessage !== null ||\n\t\t\t\tthis.dbPublicIpErrorMessage !== null ||\n\t\t\t\tthis.dbPrivateIpErrorMessage !== null\n\t\t\t);\n\t\t}\n\t},\n\tmethods: {\n\t\tvalidateIP(ip, type) {\n\t\t\ttry {\n\t\t\t\tconst stripped_ip = ip.replace(/\\s+/g, '');\n\t\t\t\tconst ipAddressRegex = /^([0-9]{1,3}\\.){3}[0-9]{1,3}$/;\n\t\t\t\tconst ver = ipAddressRegex.test(stripped_ip);\n\t\t\t\treturn ver ? null : `${type} IP is invalid`;\n\t\t\t} catch {\n\t\t\t\treturn `${type} IP cannot be blank`;\n\t\t\t}\n\t\t}\n\t}\n};\n</script>\n","<template>\n\t<div>\n\t\t<div class=\"my-2\">\n\t\t\t<span class=\"text-base\">\n\t\t\t\tAdd this SSH Key to\n\t\t\t\t<span class=\"font-mono text-blue-500\">~/.ssh/authorized_keys</span> file\n\t\t\t\tof the Server you are adding</span\n\t\t\t>\n\t\t</div>\n\t\t<ClickToCopyField :textContent=\"ssh_key\" />\n\t\t<div class=\"my-2 grid place-items-center\"></div>\n\t</div>\n</template>\n<script>\nimport ClickToCopyField from '@/components/ClickToCopyField.vue';\nexport default {\n\tname: 'SelfHostedServerVerify',\n\tprops: ['ssh_key'],\n\tcomponents: {\n\t\tClickToCopyField\n\t}\n};\n</script>\n","<template>\n\t<div>\n\t\t<label class=\"text-lg font-semibold\">\n\t\t\tSelect plan for application and database self-hosted server\n\t\t\t<br /><span class=\"text-sm text-gray-500\">\n\t\t\t\tFor server management and support\n\t\t\t</span>\n\t\t</label>\n\t\t<AlertBillingInformation class=\"mt-4\" />\n\t\t<div class=\"mt-4\">\n\t\t\t<ServerPlansTable\n\t\t\t\t:plans=\"planOptions\"\n\t\t\t\t:selectedPlan=\"selectedPlan\"\n\t\t\t\t@update:selectedPlan=\"plan => $emit('update:selectedPlan', plan)\"\n\t\t\t/>\n\t\t</div>\n\t</div>\n</template>\n<script>\nimport ServerPlansTable from '@/components/ServerPlansTable.vue';\nimport AlertBillingInformation from '@/components/AlertBillingInformation.vue';\n\nexport default {\n\tname: 'SelfHostedServerPlan',\n\temits: ['update:selectedPlan'],\n\tprops: ['options', 'selectedPlan'],\n\tcomponents: {\n\t\tServerPlansTable,\n\t\tAlertBillingInformation\n\t},\n\tcomputed: {\n\t\tplanOptions() {\n\t\t\treturn this.options;\n\t\t}\n\t}\n};\n</script>\n","<template>\n\t<WizardCard v-if=\"options\">\n\t\t<div class=\"mb-6 text-center\">\n\t\t\t<h1 class=\"text-2xl font-bold\">Create a new Self Hosted Server</h1>\n\t\t</div>\n\t\t<Steps :steps=\"steps\">\n\t\t\t<template\n\t\t\t\tv-slot=\"{ active: activeStep, next, previous, hasPrevious, hasNext }\"\n\t\t\t>\n\t\t\t\t<div class=\"mt-8\"></div>\n\t\t\t\t<SelfHostedHostname\n\t\t\t\t\tv-show=\"activeStep.name === 'SelfHostedHostname'\"\n\t\t\t\t\tv-model:title=\"title\"\n\t\t\t\t/>\n\t\t\t\t<div class=\"mt-4\">\n\t\t\t\t\t<SelfHostedServerPlan\n\t\t\t\t\t\tv-model:selectedPlan=\"selectedPlan\"\n\t\t\t\t\t\t:options=\"options\"\n\t\t\t\t\t\tv-show=\"activeStep.name === 'SelfHostedServerPlan'\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<SelfHostedServerForm\n\t\t\t\t\t\tv-show=\"activeStep.name === 'ServerDetails'\"\n\t\t\t\t\t\tv-model:appPublicIP=\"appPublicIP\"\n\t\t\t\t\t\tv-model:appPrivateIP=\"appPrivateIP\"\n\t\t\t\t\t\tv-model:dbPublicIP=\"dbPublicIP\"\n\t\t\t\t\t\tv-model:dbPrivateIP=\"dbPrivateIP\"\n\t\t\t\t\t\tv-model:error=\"ipInvalid\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"mt-4\" v-if=\"activeStep.name === 'VerifyServer'\">\n\t\t\t\t\t<SelfHostedServerVerify v-model:ssh_key=\"ssh_key\" />\n\n\t\t\t\t\t<Button\n\t\t\t\t\t\tv-if=\"$resources.verify.data === null\"\n\t\t\t\t\t\t@click=\"$resources.verify.submit()\"\n\t\t\t\t\t\t:loading=\"$resources.verify.loading\"\n\t\t\t\t\t\tvariant=\"solid\"\n\t\t\t\t\t>\n\t\t\t\t\t\tVerify Server\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tv-else\n\t\t\t\t\t\t:icon-left=\"playOutput ? 'check' : 'x'\"\n\t\t\t\t\t\tvariant=\"solid\"\n\t\t\t\t\t\t:theme=\"playOutput ? 'gray' : 'red'\"\n\t\t\t\t\t\t:appearance=\"playOutput ? 'success' : 'warning'\"\n\t\t\t\t\t\t@click=\"$resources.verify.submit()\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ playOutput ? 'Server Verified' : 'Server Unreachable' }}\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t\t<ErrorMessage class=\"mt-2\" :message=\"$resources.verify.error\" />\n\t\t\t\t<div class=\"mt-4\">\n\t\t\t\t\t<!-- Region consent checkbox -->\n\t\t\t\t\t<div class=\"my-6\" v-if=\"!hasNext\">\n\t\t\t\t\t\t<FormControl\n\t\t\t\t\t\t\tid=\"region-consent\"\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tlabel=\"I agree that the laws of the region selected by me shall stand\n\t\t\t\t\t\t\tapplicable to me and Frappe.\"\n\t\t\t\t\t\t\tclass=\"rounded border-gray-300 focus:ring-blue-500\"\n\t\t\t\t\t\t\tv-model=\"agreedToRegionConsent\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<ErrorMessage class=\"mb-4\" :message=\"$resources.newServer.error\" />\n\n\t\t\t\t\t<div class=\"flex justify-between\">\n\t\t\t\t\t\t<Button v-if=\"hasPrevious\" @click=\"previous\"> Back </Button>\n\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tv-if=\"hasNext\"\n\t\t\t\t\t\t\tclass=\"ml-auto\"\n\t\t\t\t\t\t\tvariant=\"solid\"\n\t\t\t\t\t\t\t@click=\"nextStep(activeStep, next)\"\n\t\t\t\t\t\t\t:class=\"{ 'mt-2': hasPrevious }\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tNext\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tv-show=\"!hasNext\"\n\t\t\t\t\t\t\tclass=\"ml-auto\"\n\t\t\t\t\t\t\tvariant=\"solid\"\n\t\t\t\t\t\t\t:disabled=\"!playOutput || !this.agreedToRegionConsent\"\n\t\t\t\t\t\t\t@click=\"setupServers\"\n\t\t\t\t\t\t\t:loading=\"$resources.setupServer.loading\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tSetup Server\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</template>\n\t\t</Steps>\n\t</WizardCard>\n</template>\n\n<script>\nimport WizardCard from '@/components/WizardCard.vue';\nimport Steps from '@/components/Steps.vue';\nimport SelfHostedHostname from './NewSelfHostedServerHostname.vue';\nimport SelfHostedServerForm from './NewSelfHostedServerForm.vue';\nimport SelfHostedServerVerify from './SelfHostedServerVerify.vue';\nimport SelfHostedServerPlan from './SelfHostedServerPlan.vue';\nexport default {\n\tname: 'NewSelfHostedServer',\n\tcomponents: {\n\t\tWizardCard,\n\t\tSteps,\n\t\tSelfHostedHostname,\n\t\tSelfHostedServerPlan,\n\t\tSelfHostedServerForm,\n\t\tSelfHostedServerVerify\n\t},\n\tdata() {\n\t\treturn {\n\t\t\ttitle: null,\n\t\t\toptions: null,\n\t\t\tappPublicIP: null,\n\t\t\tappPrivateIP: null,\n\t\t\tdbPublicIP: null,\n\t\t\tdbPrivateIP: null,\n\t\t\tvalidationMessage: null,\n\t\t\tserverDoc: null,\n\t\t\tssh_key: null,\n\t\t\tselectedPlan: null,\n\t\t\tdnsErrorMessage: null,\n\t\t\tipInvalid: false,\n\t\t\tunreachable: false,\n\t\t\tplayOutput: false,\n\t\t\tagreedToRegionConsent: false,\n\t\t\tsteps: [\n\t\t\t\t{\n\t\t\t\t\tname: 'SelfHostedHostname',\n\t\t\t\t\tvalidate: () => {\n\t\t\t\t\t\treturn this.title;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'SelfHostedServerPlan',\n\t\t\t\t\tvalidate: () => {\n\t\t\t\t\t\treturn this.selectedPlan;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'ServerDetails',\n\t\t\t\t\tvalidate: () => {\n\t\t\t\t\t\treturn this.appPublicIP;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'VerifyServer',\n\t\t\t\t\tvalidate: () => {\n\t\t\t\t\t\treturn this.playOutput;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t},\n\tasync mounted() {\n\t\tconst plans = await this.$call('press.api.selfhosted.get_plans');\n\t\tthis.options = plans.map(plan => {\n\t\t\tplan.disabled = !this.$account.hasBillingInfo;\n\t\t\tplan.vcpu = 'Any';\n\t\t\treturn plan;\n\t\t});\n\t\tthis.ssh_key = await this.$call('press.api.selfhosted.sshkey');\n\t},\n\tresources: {\n\t\tnewServer() {\n\t\t\treturn {\n\t\t\t\turl: 'press.api.selfhosted.new',\n\t\t\t\tparams: {\n\t\t\t\t\tserver: {\n\t\t\t\t\t\ttitle: this.title,\n\t\t\t\t\t\tapp_public_ip: this.appPublicIP,\n\t\t\t\t\t\tapp_private_ip: this.appPrivateIP,\n\t\t\t\t\t\tdb_public_ip: this.dbPublicIP,\n\t\t\t\t\t\tdb_private_ip: this.dbPrivateIP,\n\t\t\t\t\t\tplan: this.selectedPlan\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tonSuccess(data) {\n\t\t\t\t\tthis.serverDoc = data;\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\tverify() {\n\t\t\treturn {\n\t\t\t\turl: 'press.api.selfhosted.verify',\n\t\t\t\tparams: {\n\t\t\t\t\tserver: this.serverDoc\n\t\t\t\t},\n\t\t\t\tonSuccess(data) {\n\t\t\t\t\tthis.playOutput = data;\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\tsetupServer() {\n\t\t\treturn {\n\t\t\t\turl: 'press.api.selfhosted.setup',\n\t\t\t\tparams: {\n\t\t\t\t\tserver: this.serverDoc\n\t\t\t\t},\n\t\t\t\tvalidate() {\n\t\t\t\t\tlet canCreate = this.title;\n\n\t\t\t\t\tif (!this.agreedToRegionConsent) {\n\t\t\t\t\t\treturn 'Please agree to the above consent to create server';\n\t\t\t\t\t}\n\t\t\t\t\tif (!canCreate) {\n\t\t\t\t\t\treturn 'Cannot create server';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t},\n\tcomputed: {},\n\tmethods: {\n\t\tasync nextStep(activeStep, next) {\n\t\t\tif (activeStep.name === 'ServerDetails' && !this.ipInvalid) {\n\t\t\t\tthis.$resources.newServer.submit();\n\t\t\t}\n\t\t\tnext();\n\t\t},\n\t\tasync setupServers() {\n\t\t\tawait this.$resources.setupServer.submit();\n\t\t\tif (this.agreedToRegionConsent) {\n\t\t\t\tthis.$router.replace(`/servers/`);\n\t\t\t}\n\t\t}\n\t}\n};\n</script>\n"],"names":["_sfc_main","e","__async","title","error","_hoisted_1","_cache","_createElementVNode","$props","$options","$data","ip","type","stripped_ip","_hoisted_2","_hoisted_3","$event","_ctx","ClickToCopyField","_createTextVNode","ServerPlansTable","plan","SelfHostedHostname","SelfHostedServerPlan","SelfHostedServerForm","SelfHostedServerVerify","data","canCreate","activeStep","next","_hoisted_5","_openBlock","_createBlock","_component_WizardCard","_withCtx","_vShow","_createElementBlock","_toDisplayString","_createCommentVNode","_hoisted_4","previous","_normalizeClass","hasPrevious"],"mappings":"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"}