{"version":3,"mappings":"i9CA+FA,MAAAA,GAAA,CACC,iIAIA,OACC,qBAGA,qBACC,OACC,sCACA,gBACC,CACC,+DAKF,eACA,UAGF,kBACC,OACC,kCACA,wBACC,OACC,QAAAC,GAAAC,EAAA,sCAAAA,EAAA,YAAAD,EAAA,aAIF,UAAAE,GAAA,SAEC,MAAAC,EAAA,UAAAD,CAAA,iGAEAE,EAAA,4BACAA,EAAA,yBAAAD,CAAA,yBAGA,oBAAAC,EAAA,0DAED,EAEF,GAED,UACC,gKAGA,kBACC,+BACA,uJADA,sBAKC,+BAGA,+BAAAC,CAAA,CACD,CACD,CACD,CACD,YAtJI,iGAaIC,GAAA,iCAGAC,GAAA,iCAGAC,GAAA,iCAGAC,GAAA,iCAGAC,GAAA,iCAIAC,GAAA,iCAMCC,GAAA,oBAcAC,GAAA,wFAvDN,iDAFH,WAAAC,EAAA,iCAAAC,EAAA,KAAAA,EAAA,GAAAC,GAAAF,EAAA,WAAAE,KAKa,eAAAC,EAAA,uEACVC,IAAAC,EAAA,MAAAC,GAAA,oBANHL,EAAA,KAAAA,EAAA,GAAAM,EAAA,kBAYGH,IAAAC,EAAA,MAAAG,GAAA,uBACCJ,IAAAC,EAAA,MAAAI,GAAA,CACCR,EAAA,KAAAA,EAAA,GAAAS,EAAA,mHAGAT,EAAA,KAAAA,EAAA,GAAAS,EAAA,kHAIAA,EAAA,IAAAlB,GAAA,UAAAmB,GAAAxB,EAAAa,EAAA,iCAAAb,EAAA,SAGAuB,EAAA,IAAAjB,GAAA,UAAAkB,GAAAzB,EAAAc,EAAA,iCAAAd,EAAA,SAGAwB,EAAA,IAAAhB,GAAA,mBAAAiB,GAAAC,EAAAZ,EAAA,iCAAAY,EAAA,aAGAF,EAAA,IAAAf,GAAA,cAAAgB,GAAAE,EAAAb,EAAA,iCAAAa,EAAA,aAGAH,EAAA,IAAAd,GAAA,cAAAe,GAAAG,EAAAd,EAAA,iCAAAc,EAAA,aAGAb,EAAA,KAAAA,EAAA,GAAAS,EAAA,yDACAA,EAAA,IAAAb,GAAA,2BAAAc,IAAAI,EAAAf,EAAA,iCAAAe,EAAA,gCAAAJ,GAAAK,EAAAhB,EAAA,iCAAAgB,EAAA,uBArCLC,EAAA,OA2CIP,EAAA,MAAAZ,GAAA,CACCG,EAAA,KAAAA,EAAA,GAAAS,EAAA,oFAGAT,EAAA,KAAAA,EAAA,GAAAS,EAAA,uGAGkB,aAAc,YAAAV,EAAA,mFAlDrCO,EAAA,6BAqDMG,EAAA,sCArDNH,EAAA,gDAyDIG,EAAA,MAAAX,GAAA,CACCE,EAAA,MAAAA,EAAA,IAAAS,EAAA,gHA1DLH,EAAA,iBA4DkBG,EAAA,oBA5DlBH,EAAA,4CA+DM,aACC,gDACD,+DACC,QAAAN,EAAA,KAAAA,EAAA,GAAAC,GAAA,4CAlEP,QAAAC,EAAA,IAAAF,EAAA,KAAAA,EAAA,IAAAM,EAAA,0EAsEM,aACC,gHAIFG,EAAA,gGA3ELH,EAAA,iCA+EO,8EACA,gBACA,oCAjFPA,EAAA,2GCqCAtB,GAAA,CACC,mCACA,gFAGC,SAAAiC,GACA,UAAAC,IAED,OACC,wBAID,UACC,qBAED,UACC,UACC,wBAED,mDAEE,cAEEC,EAAA,SAAAC,CAAA,EAAAD,EAAA,IAAAA,EAAAC,CAAA,EAED,oBACD,EACA,QAEF,kBACC,uCAAAC,4DAGD,GAED,SACC,UAAAA,EAAA,CACC,6BAAAA,CAAA,4FAOE,oBACA,oBAAAC,MAAAD,CAAA,sDAKH,CACD,CACD,EA5EIhB,GAAA,4RAbO,cAAc,qDAEb,QAAAJ,GAAAsB,IAAwB,eAHpC,QAAArB,EAAA,mDAKkE,GAAAH,EAAA,iEAMrD,KAAAG,EAAA,SAAAsB,EAAA,cAAAD,CAAA,KACVE,GAAAhB,EAAA,MAAAJ,GAAA,MAKE,gBACA,qBAlBL,WAAAqB,EAAA,kCAAA1B,EAAA,KAAAA,EAAA,GAAAC,GAAAyB,EAAA,YAAAzB,4BAsBIE,EAAA,IAAAC,EAAAuB,EAAA,KAAAC,GAAA7B,EAAA,gBAAAsB,aACC,uBACA,oCAGC,SAAAQ,GAAA9B,EAAA,gBAAAsB,EAAAQ,CAAA,EACA,MAAAR,+GC+GNrC,GAAA,CACC,qCACA,2CACA,+GAQA,OACC,OACC,SACA,wCAEA,eACA,uBAGF,mCAEC,gBAGC,sCAFA,8CAMD,eACC,OACC,sCACA,uBAEA,UAAAG,GAAA,sDAEE,sCAEF,IAGF,eACC,OACC,4EAIA,UAAAA,GAAA,2CAEC,UAAAA,GAAA,YAAAA,EAAA,gEAEC2C,EAAAC,EAAA;iBAID,EACA,iBAAAC,0EAED,IAGF,qBACC,kDAGE,IAAAC,EAAA,GACA,gCAAAC,GAAA,CACCA,EAAA,OACCD,EAAA,oBAEC,KAAAC,EAAA,2CAEA,iBAAAA,EAAA;AAAA,EACD,EAEF,GACA,mCAGE,0CAEA,eACA,mFAGD,eAID,+EAIAC,EAAA,qCACA,qBACD,IAGF,qBACC,OACC,mDAEC,IAAAF,EAAA,GACA,gCAAAC,GAAA,CACCA,EAAA,OACCD,EAAA,oBAEC,KAAAC,EAAA,2CAEA,iBAAAA,EAAA;AAAA,EACD,EAEF,GACA,CACC,wBACA,qBACA,sCAEC,iBACA,4BAED,eAID,+EAIAC,EAAA,qCACA,qBACD,EAEF,GAED,wBAEE,iCAEC,SACC,eAEC,gCAEA,iBACA,gBAAAC,KACCC,EAAAC,EAAA,CACC,uBACA,oBACA,WAAAF,EAAA,MACA,sBAAAG,GAAA,uCAGA,qCACD,IAGF,cAEC,iBACA,QACA,eACA,iBACA,gBAAAH,KACCC,EAAAC,EAAA,eAEC,eACA,SACC,CACC,kBACA,mBAED,CACC,mBACA,kBACD,GAED,WAAAF,EAAA,KACA,sBAAAG,GAAA,CACCH,EAAA,KAAAG,CACD,CACD,IAGF,CACC,8BAEA,oBACA,eACA,iBACA,gBAAAH,KACCC,EAAAG,EAAA,sBAEC,iCAAAJ,EAAA,OACA,sBAAAK,GAAA,iBAEA,CACD,IAGF,CACC,SACA,qCAGA,aAAAL,MACC,eAEC,oBAGA,iBACA,QAAAM,GAAA,CACC,2BAAAN,EAAA,yBAED,GAGH,CACD,sBAKA,+BAGA,+BAAA9C,CAAA,CACD,mFAOA,gFAAAwB,GAAAD,GAAAD,GAAAD,EAAA,8BAAAA,EAAA,2BAAAC,EAAA,mBAAAC,EAAA,gBAAAC,EAAA,2CAIA,sCACAF,GAAAD,GAAA1B,GAAAC,EAAA,8BAAAA,EAAA,2BAAAD,EAAA,mBAAA0B,EAAA,gBAAAC,EAAA,KACA,aAAA+B,GAAA5B,GAAAD,GAAAD,EAAA,8BAAAA,EAAA,2BAAAC,EAAA,mBAAAC,EAAA,sBAAA4B,EAAA,MADA,mDAIA,sCACA/B,GAAAD,GAAA1B,GAAAC,EAAA,8BAAAA,EAAA,2BAAAD,EAAA,mBAAA0B,EAAA,gBAAAC,EAAA,KACA,iJAGC,MAAAgC,EACA,MAAAA,CACD,IANA,EAOD,GAED,SACC,kBAAAC,EAAA,IACC,WACA,qCACC,uBAEA,mDAGA,CACD,IAED,WAAAC,EAAA,yBACC,IAAAA,EAAA,SACA,uCACA,MAAAlC,GAAAD,GAAA1B,GAAAC,EAAA,8BAAAA,EAAA,2BAAAD,EAAA,mBAAA0B,EAAA,gBAAAC,EAAA,eACA,IAAAmC,GACCC,GAAAC,GAAAN,GAAA5B,GAAAD,GAAAD,EAAA,8BAAAA,EAAA,2BAAAC,EAAA,mBAAAC,EAAA,sBAAA4B,EAAA,KAAAG,KAAA,YAAAG,EAAA,eAAAD,EACA,6CAID,qFAKA,kBACC,oBACA,CACC,qCACA,SACA,iBACA,UACD,oFAKF,CACD,CACD,EAzaQ3C,GAAA,mDAwDF,wFAEMd,GAAA,8CAKK,cAKNE,GAAA,0NA7EX,WAAAM,EAAA,iCAAAC,EAAA,KAAAA,EAAA,GAAAC,GAAAF,EAAA,WAAAE,KAQa,eAAAC,EAAA,0CACVO,EAAA,MAAAJ,GAAA,iBAEwCM,GAAA1B,GAAAC,EAAA,8BAAAA,EAAA,2BAAAD,EAAA,kBAAA0B,EAAA,sBAAiEG,GAAAD,GAAAD,EAAA,8BAAAA,EAAA,2BAAAC,EAAA,YAAAC,EAAA,gCAOtG,OAAAmC,GAAAN,GAAA5B,EAAA,8BAAAA,EAAA,2BAAA4B,EAAA,kBAAAM,EAAA,eACD,iCAnBLjC,EAAA,YAuBK,aACA,YACA,UACA,iBACA,qCA3BL,WAAAU,EAAA,4BAAA1B,EAAA,KAAAA,EAAA,GAAAC,GAAAyB,EAAA,MAAAzB,gCA+BK,cACC,mLAaA,EACD,UACA,iBACC,YACD,oBAjDL,WAAAyB,EAAA,2BAAA1B,EAAA,KAAAA,EAAA,GAAAC,GAAAyB,EAAA,KAAAzB,wCAAAe,EAAA,uBAsDK,aACA,cACA,UACA,iBACA,6BA1DL,WAAAU,EAAA,2CAAA1B,EAAA,KAAAA,EAAA,GAAAC,GAAAyB,EAAA,qBAAAzB,gDA8DIE,IAAAC,EAAA,MAAAG,GAAA,0BACCJ,IAAAC,EAAA,MAAAI,GAAA,CAICC,EAAA,OAAAlB,GAAA,oBAnENS,EAAA,KAAAA,EAAA,GAAAM,EAAA,+BAsEMN,EAAA,KAAAA,EAAA,GAAAS,EAAA,8DAEDN,IAAAC,EAAA,MAAAZ,GAAA,CACCQ,EAAA,MAAAA,EAAA,IAAAS,EAAA,+HAIAA,EAAA,MAAAhB,GAAA,MAEE,kBACA,gBACC,QAAAM,EAAA,6BAjFT,QAAAG,EAAA,IAAAF,EAAA,KAAAA,EAAA,IAAAM,EAAA,yCAqFQ,kBACA,uBACC,QAAAP,EAAA,sBACA,QAAAC,EAAA,KAAAA,EAAA,OAAAD,EAAA,yBAxFT,QAAAG,EAAA,IAAAF,EAAA,MAAAA,EAAA,KAAAM,EAAA,iDAAAU,EAAA,yLAoGI,qCAIS,QAAAd,EAAA,kCAcT,eACA,gBACA,kEAEC,mDACA,QAAAF,EAAA,KAAAA,EAAA,GAAAC,GAAA,+CA3HL,QAAAC,EAAA,IAAAF,EAAA,MAAAA,EAAA,KAAAM,EAAA,mEA2GI,eACA,gBACA,kEAEC,mDACA,QAAAN,EAAA,KAAAA,EAAA,GAAAC,GAAA,+CAhHL,QAAAC,EAAA,IAAAF,EAAA,MAAAA,EAAA,KAAAM,EAAA,sHCiEAtB,GAAA,CACC,gCACA,2BAEC,sBAAAkE,GACC,IAAAC,GAAA,iGAED,iBAAAC,iBAEA,iCAAAC,qCAGD,OACC,OACC,iBACA,gCAEA,gBACA,oCACA,mCAGF,OACC,iCAAAC,EAAA,CACCA,IACC,eAGF,8BAAAA,EAAA,CACCA,IACC,oDAMD,OACC,yHAMEC,EAAA;GAEC,iDAMN,wBAEE,oCAEC,SACC,yCAGD,oBACA,iBACC,OACC,eAEC,eACA,mBACA,4CAIH,SACC,eAEC,iCAGD,CACC,eACA,mBACA,SACA,6BAGD,CACC,mDAEA,SACA,yDAGD,cAEC,iBACA,SACA,eACA,QAAAjE,EAAA8C,KACC,CACC,8CAEA,mBACD,GAAA9C,CAAA,GAGF,CACC,mBACA,qBACA,SACA,eACA,OAAAA,GAAAkE,GAAAlE,EAAA,4GAKA,GAED,CACC,sCAGE,sCAEA,2CAGF,CACC,6DAGC,aACA,wCAGF,CACC,iCAEC,aACAmE,GAAA,gGAGC,eACC,eACA,4BAEA,eAAAC,qDAEE,kCAEA,gBACD,4DAGEA,EAAA,EACA,gEAMJ,2BAGD,MAKJ,mBACC,CACC,iBACA,gBACA,OACC,OAAAC,EAAA,sBAGA,oCAEA,sDAOJ,uEAGA,OAAAzE,EAAA,4BAAAA,EAAA,iBAED,sCAID,SACC,oCACC,uCAGH,2LAtQA,OAAAiB,EAAA,EAAAC,EAAAuB,EAAA,2GAAAD,EAAA,2BAAA1B,EAAA,KAAAA,EAAA,GAAAC,GAAAyB,EAAA,KAAAzB,KAQa,eAAAC,EAAA,mCAyBVC,IAAAC,EAAA,MAAAG,GAAA,qDAvBAJ,IAAAC,EAAA,MAAAC,GAAA,sDAVHC,EAAA,oEAAAA,EAAA,oEAkBM,oBACA,gBACC,QAAAN,EAAA,KAAAA,EAAA,GAAAC,GAAAyB,EAAA,2BApBP,QAAAxB,EAAA,IAAAF,EAAA,KAAAA,EAAA,IAAAM,EAAA,uEAyBO,KAAAsD,EAAA,KAzBP,WAAAlC,EAAA,2CAAA1B,EAAA,KAAAA,EAAA,GAAAC,GAAAyB,EAAA,qBAAAzB,mCAAAe,EAAA,kGAwCG,KAAAU,EAAA,aAxCH,WAAAA,EAAA,uDAAA1B,EAAA,KAAAA,EAAA,GAAAC,GAAAyB,EAAA,iCAAAzB,mCAAAe,EAAA,iDA8CG,KAAA4C,EAAA,6CAEA,aAAAlC,EAAA,aAhDH,WAAAA,EAAA,oDAAA1B,EAAA,KAAAA,EAAA,GAAAC,GAAAyB,EAAA,8BAAAzB,GAmDG,4GAnDHe,EAAA","names":["_sfc_main","_b","_a","data","blob","link","value","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","$options","_cache","$event","_withCtx","_openBlock","_createElementBlock","_hoisted_1","_createTextVNode","_hoisted_2","_hoisted_3","_createElementVNode","_toDisplayString","_c","_d","_e","_f","_g","_createCommentVNode","Popover","Checkbox","acc","item","column","c","togglePopover","isOpen","_withDirectives","$data","_Fragment","_renderList","e","__spreadProps","__spreadValues","fetched_permissions","permissions","permission","toast","row","h","FormControl","newValue","SiteDatabaseColumnsSelector","newValues","event","_h","x","reload","table","columnSchemas","_j","_i","defineAsyncComponent","__vitePreload","ClickToCopyField","SiteDatabaseUserCredentialDialog","val","err","date","confirmDialog","hide","icon","$props"],"sources":["../../../../dashboard/src2/components/site_database_user/SiteDatabaseUserCredentialDialog.vue","../../../../dashboard/src2/components/site_database_user/SiteDatabaseColumnsSelector.vue","../../../../dashboard/src2/components/site_database_user/SiteDatabaseAddEditUserDialog.vue","../../../../dashboard/src2/components/SiteDatabaseAccessDialog.vue"],"sourcesContent":["<template>\n\t<Dialog\n\t\t:options=\"{ title: 'Database Credential', size: '2xl' }\"\n\t\tv-model=\"showDialog\"\n\t>\n\t\t<template #body-content>\n\t\t\t<div\n\t\t\t\tv-if=\"$resources.databaseCredential.loading\"\n\t\t\t\tclass=\"flex w-full items-center justify-center gap-2 py-20 text-gray-700\"\n\t\t\t>\n\t\t\t\t<Spinner class=\"w-4\" /> Loading\n\t\t\t</div>\n\t\t\t<div v-else>\n\t\t\t\t<div v-if=\"databaseCredential\">\n\t\t\t\t\t<p class=\"mb-2 text-base font-semibold text-gray-700\">\n\t\t\t\t\t\tUsing an Analytics or Business Intelligence Tool\n\t\t\t\t\t</p>\n\t\t\t\t\t<p class=\"mb-2 text-base\">\n\t\t\t\t\t\tUse following credentials with your analytics or business\n\t\t\t\t\t\tintelligence tool\n\t\t\t\t\t</p>\n\t\t\t\t\t<p class=\"ml-1 font-mono text-sm\">\n\t\t\t\t\t\tHost: {{ databaseCredential?.host }}\n\t\t\t\t\t</p>\n\t\t\t\t\t<p class=\"ml-1 font-mono text-sm\">\n\t\t\t\t\t\tPort: {{ databaseCredential?.port }}\n\t\t\t\t\t</p>\n\t\t\t\t\t<p class=\"ml-1 font-mono text-sm\">\n\t\t\t\t\t\tDatabase Name: {{ databaseCredential?.database }}\n\t\t\t\t\t</p>\n\t\t\t\t\t<p class=\"ml-1 font-mono text-sm\">\n\t\t\t\t\t\tUsername: {{ databaseCredential?.username }}\n\t\t\t\t\t</p>\n\t\t\t\t\t<p class=\"ml-1 font-mono text-sm\">\n\t\t\t\t\t\tPassword: {{ databaseCredential?.password }}\n\t\t\t\t\t</p>\n\t\t\t\t\t<p class=\"ml-1 font-mono text-sm\">Use SSL: Yes</p>\n\t\t\t\t\t<p class=\"ml-1 font-mono text-sm\">\n\t\t\t\t\t\tMax Database Connection{{\n\t\t\t\t\t\t\tdatabaseCredential?.max_connections > 1 ? 's' : ''\n\t\t\t\t\t\t}}: {{ databaseCredential?.max_connections }}\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"pb-2 pt-5\">\n\t\t\t\t\t<p class=\"mb-2 text-base font-semibold text-gray-700\">\n\t\t\t\t\t\tUsing MariaDB CLI\n\t\t\t\t\t</p>\n\t\t\t\t\t<p class=\"mb-2 text-base\">\n\t\t\t\t\t\tRun this command in your terminal to access MariaDB console\n\t\t\t\t\t</p>\n\t\t\t\t\t<ClickToCopyField class=\"ml-1\" :textContent=\"dbAccessCommand\" />\n\t\t\t\t\t<p class=\"mt-3 text-sm\">\n\t\t\t\t\t\tNote: You should have a\n\t\t\t\t\t\t<span class=\"font-mono\">mariadb</span> client installed on your\n\t\t\t\t\t\tcomputer.\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"pb-2 pt-5\">\n\t\t\t\t\t<p class=\"mb-2 text-base font-semibold text-gray-700\">SSL Info</p>\n\t\t\t\t\t<p class=\"text-sm\">\n\t\t\t\t\t\tYou need to <b>use SSL</b> to connect to the database.\n\t\t\t\t\t</p>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tclass=\"mt-3\"\n\t\t\t\t\t\t:loading=\"this.$resources.downloadSSLCert.loading\"\n\t\t\t\t\t\tloading-text=\"Downloading Full Chain SSL Certificate (.pem)\"\n\t\t\t\t\t\t@click=\"this.$resources.downloadSSLCert.submit()\"\n\t\t\t\t\t\t>Download Full Chain SSL Certificate (.pem)</Button\n\t\t\t\t\t>\n\t\t\t\t\t<ErrorMessage\n\t\t\t\t\t\tclass=\"mt-2\"\n\t\t\t\t\t\t:message=\"this.$resources.downloadSSLCert.error\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"pb-2 pt-5\">\n\t\t\t\t\t<p class=\"mb-2 text-base font-semibold text-gray-700\">Need Help?</p>\n\t\t\t\t\t<p class=\"text-sm\">\n\t\t\t\t\t\tPlease check out the\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\thref=\"https://easytouch.cloud/docs/database-users-and-permission-manager#faq\"\n\t\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\t\tclass=\"underline\"\n\t\t\t\t\t\t\t>documentation</a\n\t\t\t\t\t\t>\n\t\t\t\t\t\tto get guides on troubleshooting.\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</template>\n\t</Dialog>\n</template>\n<script>\nimport ClickToCopyField from '../ClickToCopyField.vue';\nimport { toast } from 'vue-sonner';\n\nexport default {\n\tname: 'SiteDatabaseUserCredentialDialog',\n\tprops: ['name', 'modelValue'],\n\temits: ['update:modelValue'],\n\tcomponents: { ClickToCopyField },\n\tdata() {\n\t\treturn {};\n\t},\n\tresources: {\n\t\tdatabaseCredential() {\n\t\t\treturn {\n\t\t\t\turl: 'press.api.client.run_doc_method',\n\t\t\t\tmakeParams: () => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdt: 'Site Database User',\n\t\t\t\t\t\tdn: this.name,\n\t\t\t\t\t\tmethod: 'get_credential'\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\tinitialData: {},\n\t\t\t\tauto: true\n\t\t\t};\n\t\t},\n\t\tdownloadSSLCert() {\n\t\t\treturn {\n\t\t\t\turl: 'press.api.download_ssl_cert',\n\t\t\t\tmakeParams: () => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdomain: this.databaseCredential?.host ?? ''\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\tauto: false,\n\t\t\t\tonSuccess: data => {\n\t\t\t\t\t// create a blob and trigger a download\n\t\t\t\t\tconst blob = new Blob([data], { type: 'text/plain' });\n\t\t\t\t\tconst filename = `${this.databaseCredential?.host ?? ''}.pem`;\n\t\t\t\t\tconst link = document.createElement('a');\n\t\t\t\t\tlink.href = URL.createObjectURL(blob);\n\t\t\t\t\tlink.download = filename;\n\t\t\t\t\tlink.click();\n\t\t\t\t\tURL.revokeObjectURL(link.href);\n\t\t\t\t\ttoast.success('SSL Certificate downloaded successfully');\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t},\n\tcomputed: {\n\t\tdatabaseCredential() {\n\t\t\treturn this.$resources?.databaseCredential?.data?.message ?? {};\n\t\t},\n\t\tdbAccessCommand() {\n\t\t\tif (!this.databaseCredential) return '';\n\t\t\treturn `mysql -u ${this.databaseCredential.username} -p -h ${this.databaseCredential.host} -P ${this.databaseCredential.port} --ssl --ssl-verify-server-cert`;\n\t\t},\n\t\tshowDialog: {\n\t\t\tget() {\n\t\t\t\treturn this.modelValue;\n\t\t\t},\n\t\t\tset(value) {\n\t\t\t\tthis.$emit('update:modelValue', value);\n\t\t\t}\n\t\t}\n\t}\n};\n</script>\n","<template>\n\t<FPopover ref=\"rootRef\" class=\"w-full\">\n\t\t<template #target=\"{ togglePopover }\" class=\"w-full\">\n\t\t\t<Button @click=\"togglePopover()\" class=\"px-4\">\n\t\t\t\t{{\n\t\t\t\t\tcolumns.length == 0\n\t\t\t\t\t\t? 'All Columns Allowed'\n\t\t\t\t\t\t: `${columns.length} Columns Selected`\n\t\t\t\t}}\n\t\t\t</Button>\n\t\t</template>\n\t\t<template #body=\"{ isOpen, togglePopover }\" class=\"w-full\">\n\t\t\t<div\n\t\t\t\tv-show=\"isOpen\"\n\t\t\t\tclass=\"bg-surface-white bg absolute right-0 z-[999] mt-1.5 flex max-h-[15rem] w-full list-none flex-col gap-2 overflow-y-auto overflow-x-hidden rounded-lg bg-white p-0 px-1.5 py-1.5 shadow-2xl\"\n\t\t\t>\n\t\t\t\t<FormControl\n\t\t\t\t\ttheme=\"outline\"\n\t\t\t\t\tplaceholder=\"Search\"\n\t\t\t\t\tv-model=\"searchQuery\"\n\t\t\t\t/>\n\n\t\t\t\t<FCheckbox\n\t\t\t\t\tclass=\"cursor-pointer\"\n\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\tv-for=\"column in filteredColumns\"\n\t\t\t\t\t:modelValue=\"isChecked(column)\"\n\t\t\t\t\t@change=\"e => toggleSelection(column, e)\"\n\t\t\t\t\t:label=\"column\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</template>\n\t</FPopover>\n</template>\n<script>\nimport { Popover, Checkbox } from 'frappe-ui';\n\nexport default {\n\tname: 'SiteDatabaseColumnsSelector',\n\tprops: ['modelValue', 'availableColumns'],\n\temits: ['update:modelValue'],\n\tcomponents: {\n\t\tFPopover: Popover,\n\t\tFCheckbox: Checkbox\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tsearchQuery: ''\n\t\t};\n\t},\n\tmounted() {\n\t\tthis.searchQuery = '';\n\t},\n\tcomputed: {\n\t\tcolumns() {\n\t\t\treturn this.modelValue;\n\t\t},\n\t\tallAvailableColumns() {\n\t\t\treturn this.availableColumns\n\t\t\t\t.reduce(\n\t\t\t\t\t(acc, item) => {\n\t\t\t\t\t\treturn acc.includes(item) ? acc : [...acc, item];\n\t\t\t\t\t},\n\t\t\t\t\t[...this.modelValue]\n\t\t\t\t)\n\t\t\t\t.sort();\n\t\t},\n\t\tfilteredColumns() {\n\t\t\treturn this.allAvailableColumns.filter(column =>\n\t\t\t\tcolumn.toLowerCase().includes(this.searchQuery.toLowerCase())\n\t\t\t);\n\t\t}\n\t},\n\tmethods: {\n\t\tisChecked(column) {\n\t\t\treturn this.columns.includes(column);\n\t\t},\n\t\ttoggleSelection(column, event) {\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\t\t\tif (this.isChecked(column)) {\n\t\t\t\tthis.$emit(\n\t\t\t\t\t'update:modelValue',\n\t\t\t\t\tthis.columns.filter(c => c != column)\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis.$emit('update:modelValue', [...this.columns, column]);\n\t\t\t}\n\t\t}\n\t}\n};\n</script>\n","<template>\n\t<Dialog\n\t\t:options=\"{\n\t\t\ttitle: isEditMode ? 'Edit Database User' : 'Add Database User',\n\t\t\tsize: '2xl'\n\t\t}\"\n\t\tv-model=\"showDialog\"\n\t>\n\t\t<template #body-content>\n\t\t\t<div class=\"flex flex-col gap-2\">\n\t\t\t\t<AlertBanner\n\t\t\t\t\tv-if=\"\n\t\t\t\t\t\tisEditMode &&\n\t\t\t\t\t\tthis.$resources?.databaseUser?.doc?.status === 'Failed' &&\n\t\t\t\t\t\tthis.$resources?.databaseUser?.doc?.failure_reason\n\t\t\t\t\t\"\n\t\t\t\t\t:title=\"this.$resources?.databaseUser?.doc?.failure_reason\"\n\t\t\t\t\ttype=\"error\"\n\t\t\t\t>\n\t\t\t\t</AlertBanner>\n\t\t\t\t<FormControl\n\t\t\t\t\tclass=\"mt-2\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\tvariant=\"subtle\"\n\t\t\t\t\tlabel=\"Label (to identify the user)\"\n\t\t\t\t\tv-model=\"label\"\n\t\t\t\t/>\n\t\t\t\t<FormControl\n\t\t\t\t\ttype=\"select\"\n\t\t\t\t\t:options=\"[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Read only access to all the tables',\n\t\t\t\t\t\t\tvalue: 'read_only'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Read/Write access to all the tables',\n\t\t\t\t\t\t\tvalue: 'read_write'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Granular access',\n\t\t\t\t\t\t\tvalue: 'granular'\n\t\t\t\t\t\t}\n\t\t\t\t\t]\"\n\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\tvariant=\"subtle\"\n\t\t\t\t\t:disabled=\"false\"\n\t\t\t\t\tlabel=\"Access Mode\"\n\t\t\t\t\tv-model=\"mode\"\n\t\t\t\t/>\n\t\t\t\t<FormControl\n\t\t\t\t\tv-if=\"!isEditMode\"\n\t\t\t\t\tclass=\"mt-2\"\n\t\t\t\t\ttype=\"number\"\n\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\tvariant=\"subtle\"\n\t\t\t\t\tlabel=\"Database Connections\"\n\t\t\t\t\tv-model=\"database_connections\"\n\t\t\t\t/>\n\t\t\t\t<!-- Permission configuration for Granular Mode -->\n\t\t\t\t<div v-if=\"mode == 'granular'\">\n\t\t\t\t\t<div\n\t\t\t\t\t\tv-if=\"isLoadingTableSchemas\"\n\t\t\t\t\t\tclass=\"flex w-full flex-col items-center justify-center gap-2 text-base text-gray-700\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<span class=\"flex flex-row gap-2 py-20\">\n\t\t\t\t\t\t\t<Spinner class=\"w-4\" /> Fetching table schemas\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<p class=\"text-sm\">This can take upto 5 minutes</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div v-else class=\"mt-2\">\n\t\t\t\t\t\t<p class=\"text-sm font-medium text-gray-600\">\n\t\t\t\t\t\t\tConfigure Permissions\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<ObjectList :options=\"listOptions\" />\n\t\t\t\t\t\t<div class=\"mt-4 flex w-full gap-2\">\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\t\t\t\ticonLeft=\"plus\"\n\t\t\t\t\t\t\t\t@click=\"addNewTablePermissionEntry\"\n\t\t\t\t\t\t\t\t>Add Table</Button\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\t\t\t\ticonLeft=\"refresh-ccw\"\n\t\t\t\t\t\t\t\t:loading=\"isLoadingTableSchemas\"\n\t\t\t\t\t\t\t\t@click=\"() => fetchTableSchemas(true)\"\n\t\t\t\t\t\t\t\t>Refresh Schema</Button\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<ErrorMessage\n\t\t\t\t:message=\"\n\t\t\t\t\tthis.$resources?.createDatabaseUser?.error ||\n\t\t\t\t\tthis.$resources?.updateDatabaseUser?.error\n\t\t\t\t\"\n\t\t\t\tclass=\"mt-2\"\n\t\t\t/>\n\t\t</template>\n\n\t\t<template #actions>\n\t\t\t<Button\n\t\t\t\tv-if=\"!isEditMode\"\n\t\t\t\tclass=\"w-full\"\n\t\t\t\tvariant=\"solid\"\n\t\t\t\ttheme=\"gray\"\n\t\t\t\t:disabled=\"mode == 'granular' && isLoadingTableSchemas\"\n\t\t\t\t:loading=\"this.$resources.createDatabaseUser.loading\"\n\t\t\t\t@click=\"this.$resources.createDatabaseUser.submit()\"\n\t\t\t>\n\t\t\t\tCreate User\n\t\t\t</Button>\n\t\t\t<Button\n\t\t\t\tv-else\n\t\t\t\tclass=\"w-full\"\n\t\t\t\tvariant=\"solid\"\n\t\t\t\ttheme=\"gray\"\n\t\t\t\t:disabled=\"mode == 'granular' && isLoadingTableSchemas\"\n\t\t\t\t:loading=\"this.$resources.updateDatabaseUser.loading\"\n\t\t\t\t@click=\"this.$resources.updateDatabaseUser.submit()\"\n\t\t\t\t>Save Changes</Button\n\t\t\t>\n\t\t</template>\n\t</Dialog>\n</template>\n<script>\nimport { h } from 'vue';\nimport ObjectList from '../ObjectList.vue';\nimport { ErrorMessage, FormControl } from 'frappe-ui';\nimport { icon } from '../../utils/components';\nimport { toast } from 'vue-sonner';\nimport AlertBanner from '../AlertBanner.vue';\nimport SiteDatabaseColumnsSelector from './SiteDatabaseColumnsSelector.vue';\nimport { DashboardError } from '../../utils/error';\n\nexport default {\n\tname: 'SiteDatabaseAddEditUserDialog',\n\tprops: ['site', 'db_user_name', 'modelValue'], // db_user_name is optional, only provide to edit\n\temits: ['success'],\n\tcomponents: {\n\t\tFormControl,\n\t\tObjectList,\n\t\ticon,\n\t\tAlertBanner,\n\t\tSiteDatabaseColumnsSelector\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tlabel: '',\n\t\t\tmode: 'read_only',\n\t\t\tdatabase_connections: 1,\n\t\t\tpermissions: [],\n\t\t\tlastGeneratedRowId: 0\n\t\t};\n\t},\n\tmounted() {\n\t\tthis.fetchTableSchemas();\n\t\tif (!this.isEditMode) {\n\t\t\tthis.addNewTablePermissionEntry();\n\t\t} else {\n\t\t\tthis.$resources.databaseUser.reload();\n\t\t}\n\t},\n\tresources: {\n\t\ttableSchemas() {\n\t\t\treturn {\n\t\t\t\turl: 'press.api.client.run_doc_method',\n\t\t\t\tinitialData: {},\n\t\t\t\tauto: false,\n\t\t\t\tonSuccess: data => {\n\t\t\t\t\tif (data?.message?.loading) {\n\t\t\t\t\t\tsetTimeout(this.fetchTableSchemas, 5000);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\tdatabaseUser() {\n\t\t\treturn {\n\t\t\t\ttype: 'document',\n\t\t\t\tdoctype: 'Site Database User',\n\t\t\t\tname: this.db_user_name,\n\t\t\t\tauto: false,\n\t\t\t\tonSuccess: data => {\n\t\t\t\t\tthis.label = data?.label;\n\t\t\t\t\tthis.mode = data?.mode;\n\t\t\t\t\tlet fetched_permissions = (data?.permissions ?? []).map(x => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...x,\n\t\t\t\t\t\t\tcolumns: x.selected_columns.split('\\n').filter(x => x)\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t\tthis.permissions = fetched_permissions;\n\t\t\t\t\tthis.database_connections = data?.max_connections ?? 1;\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\tcreateDatabaseUser() {\n\t\t\treturn {\n\t\t\t\turl: 'press.api.client.insert',\n\t\t\t\tmakeParams() {\n\t\t\t\t\tlet permissions = [];\n\t\t\t\t\tthis.permissions.forEach(permission => {\n\t\t\t\t\t\tif (permission.table) {\n\t\t\t\t\t\t\tpermissions.push({\n\t\t\t\t\t\t\t\ttable: permission.table,\n\t\t\t\t\t\t\t\tmode: permission.mode,\n\t\t\t\t\t\t\t\tallow_all_columns: permission.columns.length == 0,\n\t\t\t\t\t\t\t\tselected_columns: permission.columns.join('\\n')\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdoc: {\n\t\t\t\t\t\t\tdoctype: 'Site Database User',\n\t\t\t\t\t\t\tlabel: this.label,\n\t\t\t\t\t\t\tteam: this.$team.doc.name,\n\t\t\t\t\t\t\tsite: this.site,\n\t\t\t\t\t\t\tmode: this.mode,\n\t\t\t\t\t\t\tpermissions: permissions,\n\t\t\t\t\t\t\tmax_connections: parseInt(this.database_connections || 1)\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\tvalidate() {\n\t\t\t\t\tif (!this.label)\n\t\t\t\t\t\tthrow new DashboardError('Please provide a label for the user');\n\t\t\t\t},\n\t\t\t\tonSuccess() {\n\t\t\t\t\ttoast.success('User created successfully');\n\t\t\t\t\tthis.$emit('success');\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\tupdateDatabaseUser() {\n\t\t\treturn {\n\t\t\t\turl: 'press.api.client.run_doc_method',\n\t\t\t\tmakeParams() {\n\t\t\t\t\tlet permissions = [];\n\t\t\t\t\tthis.permissions.forEach(permission => {\n\t\t\t\t\t\tif (permission.table) {\n\t\t\t\t\t\t\tpermissions.push({\n\t\t\t\t\t\t\t\ttable: permission.table,\n\t\t\t\t\t\t\t\tmode: permission.mode,\n\t\t\t\t\t\t\t\tallow_all_columns: permission.columns.length == 0,\n\t\t\t\t\t\t\t\tselected_columns: permission.columns.join('\\n')\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdt: 'Site Database User',\n\t\t\t\t\t\tdn: this.db_user_name,\n\t\t\t\t\t\tmethod: 'save_and_apply_changes',\n\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\tlabel: this.label,\n\t\t\t\t\t\t\tmode: this.mode,\n\t\t\t\t\t\t\tpermissions: permissions\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\tvalidate() {\n\t\t\t\t\tif (!this.label)\n\t\t\t\t\t\tthrow new DashboardError('Please provide a label for the user');\n\t\t\t\t},\n\t\t\t\tonSuccess() {\n\t\t\t\t\ttoast.success('User updated successfully');\n\t\t\t\t\tthis.$emit('success');\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t},\n\tcomputed: {\n\t\tlistOptions() {\n\t\t\treturn {\n\t\t\t\tdata: () => this.permissions,\n\t\t\t\tcolumns: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Table',\n\t\t\t\t\t\tfieldname: 'table',\n\t\t\t\t\t\twidth: '200px',\n\t\t\t\t\t\ttype: 'Component',\n\t\t\t\t\t\tcomponent: ({ row }) => {\n\t\t\t\t\t\t\treturn h(FormControl, {\n\t\t\t\t\t\t\t\tclass: 'w-full -mx-1.5',\n\t\t\t\t\t\t\t\ttype: 'autocomplete',\n\t\t\t\t\t\t\t\tmodelValue: row.table,\n\t\t\t\t\t\t\t\t'onUpdate:modelValue': newValue => {\n\t\t\t\t\t\t\t\t\trow.table = newValue?.value || '';\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\toptions: this.autocompleteTableOptions\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Mode',\n\t\t\t\t\t\tfieldname: 'mode',\n\t\t\t\t\t\twidth: 1,\n\t\t\t\t\t\talign: 'center',\n\t\t\t\t\t\ttype: 'Component',\n\t\t\t\t\t\tcomponent: ({ row }) => {\n\t\t\t\t\t\t\treturn h(FormControl, {\n\t\t\t\t\t\t\t\ttype: 'select',\n\t\t\t\t\t\t\t\tclass: 'w-full',\n\t\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tlabel: 'Read Only',\n\t\t\t\t\t\t\t\t\t\tvalue: 'read_only'\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tlabel: 'Read Write',\n\t\t\t\t\t\t\t\t\t\tvalue: 'read_write'\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tmodelValue: row.mode,\n\t\t\t\t\t\t\t\t'onUpdate:modelValue': newValue => {\n\t\t\t\t\t\t\t\t\trow.mode = newValue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Columns',\n\t\t\t\t\t\twidth: '200px',\n\t\t\t\t\t\tfieldname: 'columns',\n\t\t\t\t\t\talign: 'center',\n\t\t\t\t\t\ttype: 'Component',\n\t\t\t\t\t\tcomponent: ({ row }) => {\n\t\t\t\t\t\t\treturn h(SiteDatabaseColumnsSelector, {\n\t\t\t\t\t\t\t\tmodelValue: row.columns,\n\t\t\t\t\t\t\t\tavailableColumns: this.getColumns(row.table),\n\t\t\t\t\t\t\t\t'onUpdate:modelValue': newValues => {\n\t\t\t\t\t\t\t\t\trow.columns = [...newValues];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: '',\n\t\t\t\t\t\twidth: 0.6,\n\t\t\t\t\t\talign: 'right',\n\t\t\t\t\t\ttype: 'Button',\n\t\t\t\t\t\tButton: ({ row }) => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tlabel: true ? 'check' : 'plus',\n\t\t\t\t\t\t\t\tslots: {\n\t\t\t\t\t\t\t\t\ticon: icon('x')\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tvariant: 'subtle',\n\t\t\t\t\t\t\t\tonClick: event => {\n\t\t\t\t\t\t\t\t\tthis.removePermissionEntry(row.name);\n\t\t\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\t\t},\n\t\tshowDialog: {\n\t\t\tget() {\n\t\t\t\treturn this.modelValue;\n\t\t\t},\n\t\t\tset(value) {\n\t\t\t\tthis.$emit('update:modelValue', value);\n\t\t\t}\n\t\t},\n\t\tisEditMode() {\n\t\t\treturn !!this.db_user_name;\n\t\t},\n\t\tisLoadingTableSchemas() {\n\t\t\tif (this.$resources?.tableSchemas?.loading) return true;\n\t\t\tif (this.$resources?.tableSchemas?.data?.message?.loading) return true;\n\t\t\treturn false;\n\t\t},\n\t\ttableNames() {\n\t\t\tif (this.isLoadingTableSchemas) return [];\n\t\t\tif (!this.$resources?.tableSchemas?.data?.message?.data) return [];\n\t\t\treturn Object.keys(this.$resources?.tableSchemas?.data?.message?.data);\n\t\t},\n\t\tautocompleteTableOptions() {\n\t\t\tif (this.isLoadingTableSchemas) return [];\n\t\t\tif (!this.$resources?.tableSchemas?.data?.message?.data) return [];\n\t\t\treturn Object.keys(\n\t\t\t\tthis.$resources?.tableSchemas?.data?.message?.data\n\t\t\t).map(x => ({\n\t\t\t\tlabel: x,\n\t\t\t\tvalue: x\n\t\t\t}));\n\t\t}\n\t},\n\tmethods: {\n\t\tfetchTableSchemas(reload = false) {\n\t\t\tif (!this.site) return;\n\t\t\tthis.$resources.tableSchemas.submit({\n\t\t\t\tdt: 'Site',\n\t\t\t\tdn: this.site,\n\t\t\t\tmethod: 'fetch_database_table_schema',\n\t\t\t\targs: {\n\t\t\t\t\treload\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tgetColumns(table) {\n\t\t\tif (!table) return [];\n\t\t\tif (this.isLoadingTableSchemas) return [];\n\t\t\tif (!this.$resources?.tableSchemas?.data?.message?.data) return [];\n\t\t\tlet columnSchemas =\n\t\t\t\tthis.$resources?.tableSchemas?.data?.message?.data[table]?.columns ??\n\t\t\t\t[];\n\t\t\tlet columns = [];\n\t\t\tcolumnSchemas.forEach(x => {\n\t\t\t\tcolumns.push(x.column);\n\t\t\t});\n\t\t\treturn columns;\n\t\t},\n\t\taddNewTablePermissionEntry() {\n\t\t\tthis.lastGeneratedRowId = this.lastGeneratedRowId + 1;\n\t\t\tthis.permissions = [\n\t\t\t\t...this.permissions,\n\t\t\t\t{\n\t\t\t\t\tname: String(this.lastGeneratedRowId),\n\t\t\t\t\ttable: '',\n\t\t\t\t\tmode: 'read_only',\n\t\t\t\t\tcolumns: []\n\t\t\t\t}\n\t\t\t];\n\t\t},\n\t\tremovePermissionEntry(name) {\n\t\t\tthis.permissions = this.permissions.filter(x => x.name !== name);\n\t\t}\n\t}\n};\n</script>\n","<template>\n\t<Dialog\n\t\t:options=\"{\n\t\t\ttitle: 'Manage Database Users',\n\t\t\tsize: planSupportsDatabaseAccess ? '3xl' : 'xl',\n\t\t}\"\n\t\tv-model=\"show\"\n\t>\n\t\t<template #body-content>\n\t\t\t<!-- Not available on current plan, upsell higher plans -->\n\t\t\t<div v-if=\"!planSupportsDatabaseAccess\">\n\t\t\t\t<div>\n\t\t\t\t\t<p class=\"text-base\">\n\t\t\t\t\t\tDatabase access is not available on your current plan. <br />Please\n\t\t\t\t\t\tupgrade to a higher plan to use this feature.\n\t\t\t\t\t</p>\n\n\t\t\t\t\t<Button\n\t\t\t\t\t\tclass=\"mt-4 w-full\"\n\t\t\t\t\t\tvariant=\"solid\"\n\t\t\t\t\t\t@click=\"showChangePlanDialog = true\"\n\t\t\t\t\t>\n\t\t\t\t\t\tUpgrade Site Plan\n\t\t\t\t\t</Button>\n\t\t\t\t\t<ManageSitePlansDialog\n\t\t\t\t\t\t:site=\"site\"\n\t\t\t\t\t\tv-model=\"showChangePlanDialog\"\n\t\t\t\t\t\tv-if=\"showChangePlanDialog\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<!-- Available on the current plan -->\n\t\t\t<div v-else>\n\t\t\t\t<ObjectList :options=\"listOptions\" />\n\t\t\t</div>\n\t\t</template>\n\t</Dialog>\n\n\t<SiteDatabaseUserCredentialDialog\n\t\t:name=\"selectedUser\"\n\t\tv-model=\"showDatabaseUserCredentialDialog\"\n\t\tv-if=\"showDatabaseUserCredentialDialog\"\n\t/>\n\n\t<SiteDatabaseAddEditUserDialog\n\t\t:site=\"site\"\n\t\t:key=\"selectedUser ? selectedUser : 'new'\"\n\t\t:db_user_name=\"selectedUser\"\n\t\tv-model=\"showDatabaseAddEditUserDialog\"\n\t\tv-if=\"showDatabaseAddEditUserDialog\"\n\t\t@success=\"this.hideSiteDatabaseAddEditUserDialog\"\n\t/>\n</template>\n<script>\nimport { defineAsyncComponent } from 'vue';\nimport { getCachedDocumentResource } from 'frappe-ui';\nimport ClickToCopyField from './ClickToCopyField.vue';\nimport ObjectList from './ObjectList.vue';\nimport { date } from '../utils/format';\nimport { confirmDialog, icon } from '../utils/components';\nimport SiteDatabaseUserCredentialDialog from './site_database_user/SiteDatabaseUserCredentialDialog.vue';\nimport SiteDatabaseAddEditUserDialog from './site_database_user/SiteDatabaseAddEditUserDialog.vue';\nimport { toast } from 'vue-sonner';\n\nexport default {\n\tname: 'SiteDatabaseAccessDialog',\n\tprops: ['site'],\n\tcomponents: {\n\t\tManageSitePlansDialog: defineAsyncComponent(\n\t\t\t() => import('./ManageSitePlansDialog.vue'),\n\t\t),\n\t\tClickToCopyField,\n\t\tObjectList,\n\t\tSiteDatabaseUserCredentialDialog,\n\t\tSiteDatabaseAddEditUserDialog,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tmode: 'read_only',\n\t\t\tshow: true,\n\t\t\tshowChangePlanDialog: false,\n\t\t\tselectedUser: '',\n\t\t\tshowDatabaseUserCredentialDialog: false,\n\t\t\tshowDatabaseAddEditUserDialog: false,\n\t\t};\n\t},\n\twatch: {\n\t\tshowDatabaseUserCredentialDialog(val) {\n\t\t\tif (!val) {\n\t\t\t\tthis.show = true;\n\t\t\t}\n\t\t},\n\t\tshowDatabaseAddEditUserDialog(val) {\n\t\t\tif (!val) {\n\t\t\t\tthis.show = true;\n\t\t\t}\n\t\t},\n\t},\n\tresources: {\n\t\tdeleteSiteDatabaseUser() {\n\t\t\treturn {\n\t\t\t\turl: 'press.api.client.run_doc_method',\n\t\t\t\tonSuccess() {\n\t\t\t\t\ttoast.success('Database User will be deleted shortly');\n\t\t\t\t},\n\t\t\t\tonError(err) {\n\t\t\t\t\ttoast.error(\n\t\t\t\t\t\terr.messages.length\n\t\t\t\t\t\t\t? err.messages.join('\\n')\n\t\t\t\t\t\t\t: 'Failed to initiate database user deletion',\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\t},\n\tcomputed: {\n\t\tlistOptions() {\n\t\t\treturn {\n\t\t\t\tdoctype: 'Site Database User',\n\t\t\t\tfilters: {\n\t\t\t\t\tsite: this.site,\n\t\t\t\t\tstatus: ['!=', 'Archived'],\n\t\t\t\t},\n\t\t\t\tsearchField: 'label',\n\t\t\t\tfilterControls() {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'select',\n\t\t\t\t\t\t\tlabel: 'Status',\n\t\t\t\t\t\t\tfieldname: 'status',\n\t\t\t\t\t\t\toptions: ['', 'Pending', 'Active', 'Failed'],\n\t\t\t\t\t\t},\n\t\t\t\t\t];\n\t\t\t\t},\n\t\t\t\tcolumns: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Label',\n\t\t\t\t\t\tfieldname: 'label',\n\t\t\t\t\t\twidth: '150px',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Status',\n\t\t\t\t\t\tfieldname: 'status',\n\t\t\t\t\t\twidth: 0.5,\n\t\t\t\t\t\talign: 'center',\n\t\t\t\t\t\ttype: 'Badge',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'DB Connections',\n\t\t\t\t\t\tfieldname: 'max_connections',\n\t\t\t\t\t\twidth: 0.5,\n\t\t\t\t\t\talign: 'center',\n\t\t\t\t\t\tformat: (value) => `${value} Connection` + (value > 1 ? 's' : ''),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Mode',\n\t\t\t\t\t\tfieldname: 'mode',\n\t\t\t\t\t\twidth: 0.5,\n\t\t\t\t\t\talign: 'center',\n\t\t\t\t\t\tformat: (value, row) => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tread_only: 'Read Only',\n\t\t\t\t\t\t\t\tread_write: 'Read/Write',\n\t\t\t\t\t\t\t\tgranular: 'Granular',\n\t\t\t\t\t\t\t}[value];\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Created On',\n\t\t\t\t\t\tfieldname: 'creation',\n\t\t\t\t\t\twidth: 0.5,\n\t\t\t\t\t\talign: 'center',\n\t\t\t\t\t\tformat: (value) => date(value, 'll'),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\trowActions: ({ row, listResource, documentResource }) => {\n\t\t\t\t\tif (row.status === 'Archived' || row.status === 'Pending') {\n\t\t\t\t\t\treturn [];\n\t\t\t\t\t}\n\t\t\t\t\treturn [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'View Credential',\n\t\t\t\t\t\t\tonClick: () => {\n\t\t\t\t\t\t\t\tthis.show = false;\n\t\t\t\t\t\t\t\tthis.selectedUser = row.name;\n\t\t\t\t\t\t\t\tthis.showDatabaseUserCredentialDialog = true;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Configure User',\n\t\t\t\t\t\t\tonClick: () => {\n\t\t\t\t\t\t\t\tthis.selectedUser = row.name;\n\t\t\t\t\t\t\t\tthis.show = false;\n\t\t\t\t\t\t\t\tthis.showDatabaseAddEditUserDialog = true;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Delete User',\n\t\t\t\t\t\t\tonClick: () => {\n\t\t\t\t\t\t\t\tthis.show = false;\n\t\t\t\t\t\t\t\tconfirmDialog({\n\t\t\t\t\t\t\t\t\ttitle: 'Delete Database User',\n\t\t\t\t\t\t\t\t\tmessage: `Are you sure you want to delete the database user ?<br>`,\n\t\t\t\t\t\t\t\t\tprimaryAction: {\n\t\t\t\t\t\t\t\t\t\tlabel: 'Delete',\n\t\t\t\t\t\t\t\t\t\tvariant: 'solid',\n\t\t\t\t\t\t\t\t\t\ttheme: 'red',\n\t\t\t\t\t\t\t\t\t\tonClick: ({ hide }) => {\n\t\t\t\t\t\t\t\t\t\t\tthis.$resources.deleteSiteDatabaseUser.submit({\n\t\t\t\t\t\t\t\t\t\t\t\tdt: 'Site Database User',\n\t\t\t\t\t\t\t\t\t\t\t\tdn: row.name,\n\t\t\t\t\t\t\t\t\t\t\t\tmethod: 'archive',\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\tthis.$resources.deleteSiteDatabaseUser.promise.then(\n\t\t\t\t\t\t\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\thide();\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.show = true;\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\treturn this.$resources.deleteSiteDatabaseUser.promise;\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tonSuccess: () => {\n\t\t\t\t\t\t\t\t\t\tlistResource.refresh();\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t];\n\t\t\t\t},\n\t\t\t\tprimaryAction: () => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tlabel: 'Add User',\n\t\t\t\t\t\tvariant: 'solid',\n\t\t\t\t\t\tslots: {\n\t\t\t\t\t\t\tprefix: icon('plus'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tonClick: () => {\n\t\t\t\t\t\t\tthis.show = false;\n\t\t\t\t\t\t\tthis.selectedUser = null;\n\t\t\t\t\t\t\tthis.showDatabaseAddEditUserDialog = true;\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\t\tsitePlan() {\n\t\t\treturn this.$site.doc.current_plan;\n\t\t},\n\t\tplanSupportsDatabaseAccess() {\n\t\t\treturn this.sitePlan?.database_access;\n\t\t},\n\t\t$site() {\n\t\t\treturn getCachedDocumentResource('Site', this.site);\n\t\t},\n\t},\n\tmethods: {\n\t\thideSiteDatabaseAddEditUserDialog() {\n\t\t\tthis.showDatabaseAddEditUserDialog = false;\n\t\t},\n\t},\n};\n</script>\n"],"file":"assets/SiteDatabaseAccessDialog-PK4kLsGm.js"}