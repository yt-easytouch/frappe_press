{"version":3,"file":"SiteBinaryLogs-BK7zCqzv.js","sources":["../../../../dashboard/src2/components/site/performance/SiteBinaryLogs.vue"],"sourcesContent":["<template>\n\t<PerformanceReport\n\t\ttitle=\"Binary Logs\"\n\t\t:site=\"name\"\n\t\t:reportOptions=\"binaryLogsOptions\"\n\t/>\n</template>\n\n<script>\nimport dayjs from '../../../utils/dayjs';\nimport { DashboardError } from '../../../utils/error';\nimport PerformanceReport from './PerformanceReport.vue';\nimport { toast } from 'vue-sonner';\n\nexport default {\n\tname: 'SiteBinaryLogs',\n\tprops: ['name'],\n\tcomponents: { PerformanceReport },\n\tdata() {\n\t\treturn {\n\t\t\tstart_time: dayjs().subtract(2, 'hour').format('YYYY-MM-DD HH:mm:ss'),\n\t\t\tend_time: dayjs().format('YYYY-MM-DD HH:mm:ss'),\n\t\t\tpattern: '.*',\n\t\t\tmax_lines: 50\n\t\t};\n\t},\n\tresources: {\n\t\tbinaryLogs() {\n\t\t\treturn {\n\t\t\t\turl: 'press.api.analytics.binary_logs',\n\t\t\t\tmakeParams: params => {\n\t\t\t\t\tif (params) return params;\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tname: this.name,\n\t\t\t\t\t\tstart_time: this.start_time,\n\t\t\t\t\t\tend_time: this.end_time,\n\t\t\t\t\t\tpattern: this.pattern,\n\t\t\t\t\t\tmax_lines: this.max_lines\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\tvalidate() {\n\t\t\t\t\tif (this.max_lines < 1 || this.max_lines > 500) {\n\t\t\t\t\t\ttoast.error('Max lines should be between 1 and 500');\n\t\t\t\t\t\tthrow new DashboardError('Max lines should be between 1 and 500');\n\t\t\t\t\t}\n\t\t\t\t\t// check between start_time and end_time is less than 2 hours\n\t\t\t\t\tconst start = dayjs(this.start_time);\n\t\t\t\t\tconst end = dayjs(this.end_time);\n\t\t\t\t\tif (end.diff(start, 'hour') > 2) {\n\t\t\t\t\t\ttoast.error('Time range should be less than 2 hours');\n\t\t\t\t\t\tthrow new DashboardError('Time range should be less than 2 hours');\n\t\t\t\t\t}\n\t\t\t\t\t// start_time should be less than end_time\n\t\t\t\t\tif (start.isAfter(end)) {\n\t\t\t\t\t\ttoast.error('Start time should be less than end time');\n\t\t\t\t\t\tthrow new DashboardError('Start time should be less than end time');\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tonError(error) {\n\t\t\t\t\tconsole.error(error.message);\n\t\t\t\t},\n\t\t\t\tauto: false,\n\t\t\t\tpageLength: 10,\n\t\t\t\tkeepData: true,\n\t\t\t\tinitialData: []\n\t\t\t};\n\t\t}\n\t},\n\tcomputed: {\n\t\tbinaryLogsOptions() {\n\t\t\treturn {\n\t\t\t\tdata: () => this.$resources.binaryLogs.data,\n\t\t\t\tupdateFilters: params => {\n\t\t\t\t\tif (!params) return;\n\t\t\t\t\tfor (const [key, value] of Object.entries(params)) {\n\t\t\t\t\t\tif (key === 'start_time') this.start_time = value;\n\t\t\t\t\t\tif (key === 'end_time') this.end_time = value;\n\t\t\t\t\t\tif (key === 'pattern') this.pattern = value;\n\t\t\t\t\t\tif (key === 'max_lines') this.max_lines = value;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tcolumns: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Timestamp',\n\t\t\t\t\t\tfieldname: 'timestamp',\n\t\t\t\t\t\twidth: '12rem',\n\t\t\t\t\t\tformat: value => {\n\t\t\t\t\t\t\treturn this.$format.date(value, 'YYYY-MM-DD HH:mm:ss');\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{ label: 'Query', fieldname: 'query', class: 'font-mono' }\n\t\t\t\t],\n\t\t\t\tfilterControls: () => {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'datetime',\n\t\t\t\t\t\t\tlabel: 'Start Time',\n\t\t\t\t\t\t\tfieldname: 'start_time',\n\t\t\t\t\t\t\tdefault: this.start_time\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'datetime',\n\t\t\t\t\t\t\tlabel: 'End Time',\n\t\t\t\t\t\t\tfieldname: 'end_time',\n\t\t\t\t\t\t\tdefault: this.end_time\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Pattern',\n\t\t\t\t\t\t\tfieldname: 'pattern',\n\t\t\t\t\t\t\tdefault: this.pattern\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Max Lines',\n\t\t\t\t\t\t\tfieldname: 'max_lines',\n\t\t\t\t\t\t\tdefault: this.max_lines\n\t\t\t\t\t\t}\n\t\t\t\t\t];\n\t\t\t\t},\n\t\t\t\tactions: () => [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'View Logs',\n\t\t\t\t\t\tvariant: 'solid',\n\t\t\t\t\t\tloading: this.$resources.binaryLogs.loading,\n\t\t\t\t\t\tloadingText: 'Loading',\n\t\t\t\t\t\tonClick: () => this.$resources.binaryLogs.reload()\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\t\t}\n\t}\n};\n</script>\n"],"names":["_sfc_main","PerformanceReport","dayjs","params","toast","start","error","key","value","$props","$options"],"mappings":"sxBAcA,MAAAA,EAAA,CACC,KAAA,iBACA,MAAA,CAAA,MAAA,EACA,WAAA,CAAA,kBAAAC,CAAA,EACA,MAAA,CACC,MAAA,CACC,WAAAC,EAAA,EAAA,SAAA,EAAA,MAAA,EAAA,OAAA,qBAAA,EACA,SAAAA,EAAA,EAAA,OAAA,qBAAA,sDAOA,MAAA,CACC,IAAA,kCACA,WAAAC,MAGC,CACC,KAAA,KAAA,uDAGA,QAAA,KAAA,6CAKD,GAAA,KAAA,UAAA,GAAA,KAAA,UAAA,IACCC,MAAAA,EAAA,MAAA,uCAAA,iDAID,MAAAC,EAAAH,EAAA,KAAA,UAAA,8QAYD,QAAAI,EAAA,4EAQF,GAED,SAAA,CACC,mBAAA,CACC,MAAA,CACC,KAAA,IAAA,KAAA,WAAA,WAAA,uBAEC,GAAAH,EACA,SAAA,CAAAI,EAAAC,CAAA,IAAA,OAAA,QAAAL,CAAA,EACCI,IAAA,eAAA,KAAA,WAAAC,GACAD,IAAA,aAAA,KAAA,SAAAC,GACAD,IAAA,YAAA,KAAA,QAAAC,GACAD,IAAA,cAAA,KAAA,UAAAC,IAGF,QAAA,CACC,CACC,MAAA,YACA,UAAA,0BAEA,OAAAA,oGAMF,eAAA,IACC,CACC,CACC,KAAA,WACA,MAAA,6DAID,CACC,KAAA,WACA,MAAA,WACA,UAAA,WACA,QAAA,KAAA,UAED,CACC,MAAA,UACA,UAAA,UACA,QAAA,KAAA,SAED,CACC,MAAA,YACA,UAAA,YACA,QAAA,KAAA,SACD,gBAID,CACC,MAAA,YACA,QAAA,QACA,QAAA,KAAA,WAAA,WAAA,QACA,YAAA,yDAED,CACD,EAEF,CACD,CACD,yEAjIE,MAAA,cACC,KAAAC,EAAA,KACA,cAAAC,EAAA"}